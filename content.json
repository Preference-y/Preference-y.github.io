{"meta":{"title":"Hexo","subtitle":"","description":"","author":"Ning","url":"https://preference-y.github.io","root":"/"},"pages":[{"title":"关于","date":"2020-09-22T07:49:36.444Z","updated":"2020-09-22T07:49:36.444Z","comments":false,"path":"about/index.html","permalink":"https://preference-y.github.io/about/index.html","excerpt":"","text":"个人详细介绍: 无 Markdown 语法快速入门 Markdown 是一种轻量级标记语言，能将文本换成有效的XHTML(或者HTML)文档，它的目标是实现易读易写，成为一种适用于网络的书写语言。 Markdown 语言简单明了，易于掌握，所以用它来写作是件既效率又舒服的事情。我们所熟知的一些大型CMS，如Joomla、Drupal等都能很好的支持Markdown。我是因为写GitHub项目库中的Readme才开始接触Markdown。 Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。 Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。 Markdown 的理念是，能让文档更容易读、写和随意改。 Markdown 是一种书写的格式，HTML 是一种发布的格式。 Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 Headers 标题 123456# H1## H2### H3#### H4##### H5###### H6 另外，H1和H2还能用以下方式显示： 1234567一级标题===二级标题--- Emphasis 文本强调 123*斜体* or _强调_**加粗** or __加粗__***粗斜体*** or ___粗斜体__ 但是，如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号： 这是一段 *文本强调* 的说明示例。如果要在文字前后直接插入普通的星号或底线，你可以用反斜杠（转义符）： \\*这是一段被星号包围的文字\\* Lists 列表 Unordered 无序列表 12345678910111213* 无序列表子项1* 无序列表子项2* 无序列表子项3+ 无序列表子项1+ 无序列表子项2+ 无序列表子项3- 无序列表子项1- 无序列表子项2- 无序列表子项3 Ordered 有序列表 123456781. 有序列表子项12. 有序列表子项23. 有序列表子项31. 有序列表子项1- 有序列表子项2- 有序列表子项3 组合 1234567891011121314* 产品介绍（子项无项目符号） 此时子项要以一个制表符 或者 4个空格 缩进 * 产品特点 1. 特点1 2. 特点2 3. 特点3 * 产品功能 1. 功能1 - 功能2 - 功能3 可有时我们会出现这样的情况，首行内容是以日期或数字开头： 2019. 公司年度目标。为了避免也被转化成有序列表，我们可以在”.”前加上反斜杠（转义符）： 2019\\. 公司年度目标。 Links 链接（title为可选项） inline-style 内嵌方式 1234567891011语法： [link-text](url-link &quot;optional-tips&quot;) 解释： link-text：显示的链接文本 url-link：url链接 optional-tips：当鼠标放在 link-text 上显示的提示 示例： [Markdown快速入门](https://www.yuque.com/xiaokongping/md/quick-start &quot;Markdown快速入门&quot;) Reference-style 引用方式 123456789101112131415161718语法： [link-text][reference-id] [reference-id]:url-link &quot;optional-tips&quot; （在同一个文件的其它段落定义）解释： link-text: 显示的链接文本 reference-id: 链接的ID optional-tips：当鼠标放在 link-text 上显示的提示 示例： [百度搜索][baidu] [baidu]:www.baidu.com &quot;使用百度进行搜索&quot; 注意： [link-text][reference-id] 与 [reference-id]:url-link &quot;optional-tips&quot; 之间要至少有一行的的间距 Email 邮件 1&lt;mazhili1991@ailiyun.com&gt; Images 图片 inline-style 内嵌方式 1![替代文字](http://statics.w3cschool.cn/images/w3c/index-logo.png &quot;标题文字&quot;) Reference-style 引用方式 123![替代文字][logo][logo]: http://statics.w3cschool.cn/images/w3c/index-logo.png &quot;标题文字&quot; Code and Syntax Highlighting 代码和语法高亮 标记一小段行内代码 12345语法： `这是被包裹的文字` 示例： 不是因为寂寞才想你，只是因为`想你`才寂寞。 如果高亮的内容包含 ` 号，可以这样写 1`` `被包裹的文字` `` **语法高亮：** html代码 12```html &lt;div&gt;Syntax Highlighting&lt;/div&gt; 123456css代码&#96;&#96;&#96;markdown&#96;&#96;&#96;css body &#123; font-size: 12px; &#125; 12345JavaScript代码&#96;&#96;&#96;markdown&#96;&#96;&#96;javascript let s &#x3D; &#39;JavaScript syntax highlighting&#39; alert(s) 123456php代码&#96;&#96;&#96;markdown&#96;&#96;&#96;php &lt;?php echo &#39;Hello, World!&#39; ?&gt; 12345python代码&#96;&#96;&#96;markdown&#96;&#96;&#96;python s &#x3D; Python syntax highlighting print s 12345678910111213141516&lt;br &#x2F;&gt;&lt;a name&#x3D;&quot;Oi5PU&quot;&gt;&lt;&#x2F;a&gt;## Block Code 代码分组(代码区块)---Blockquotes 引用，在该行开头缩进4个空格或一个制表符(tab)&#96;&#96;&#96;markdown&gt; Email-style angle brackets&gt; are used for blockquotes.&gt; &gt; And, they can be nested.&gt; #### Headers in blockquotes&gt; * You can quote a list.&gt; * Etc. Hard Line Breaks 换行 在一行的结尾处加上2个或2个以上的空格，也可以使用标签 123456第一行文字 第二行文字或者第一行文字&lt;br&gt;第二行文字 Horizontal Rules 水平分割线 三种方式添加水平分割线 123456781： ***2： * * *3： - - - Escape character 转义符(反斜杠) Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果，你可以在星号的前面加上反斜杠 1\\*这里是被强调的文字\\* Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： 123456789101112\\反斜杠 `反引号 *星号 _下划线 &#123;&#125;花括号 []方括号 ()括弧 #井字号 +加号 -减号 .英文句 !感叹号 Addtional 补充：Markdown也支持传统的HTML标签。比如一个链接，你不太喜欢Markdown的写法，也可以直接写成： 1&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度一下&lt;/a&gt; 附录 Markdown 官网：http://daringfireball.net/projects/markdown/参考资料：https://markdown.tw/Markdown 在线编辑器： W3Cschool Markdown：https://www.w3cschool.cn/tools/index?name=markdown Markdown Here：https://markdown-here.com/livedemo.html"},{"title":"书单","date":"2020-06-07T10:30:31.481Z","updated":"2020-06-07T10:30:31.481Z","comments":false,"path":"books/index.html","permalink":"https://preference-y.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-09-21T07:16:16.552Z","updated":"2020-09-21T07:16:16.552Z","comments":false,"path":"categories/index.html","permalink":"https://preference-y.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-06-07T10:30:31.481Z","updated":"2020-06-07T10:30:31.481Z","comments":true,"path":"links/index.html","permalink":"https://preference-y.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-09-21T07:16:16.568Z","updated":"2020-09-21T07:16:16.568Z","comments":false,"path":"tags/index.html","permalink":"https://preference-y.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-06-07T10:30:31.482Z","updated":"2020-06-07T10:30:31.482Z","comments":false,"path":"repository/index.html","permalink":"https://preference-y.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"解决hexo搭建的博客的翻页箭头显示代码bug","slug":"解决hexo搭建的博客的翻页箭头显示代码bug","date":"2020-09-22T17:45:24.000Z","updated":"2020-09-22T17:47:29.731Z","comments":true,"path":"2020/09/23/解决hexo搭建的博客的翻页箭头显示代码bug/","link":"","permalink":"https://preference-y.github.io/2020/09/23/%E8%A7%A3%E5%86%B3hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BF%BB%E9%A1%B5%E7%AE%AD%E5%A4%B4%E6%98%BE%E7%A4%BA%E4%BB%A3%E7%A0%81bug/","excerpt":"","text":"问题场景：hexo博客pure主题，分页显示bug，将代码显示出来了；如下所示：搭建好博客，上传文章数量多到需要分页时，发现翻页箭头显示了代码。。。 而不是’&gt;’ 解决办法：找到 pagination.ejs中的 paginator 函数，添加 escape: false 试试，代码形如： 12345&lt;%- paginator(&#123; prev_text: &#39;&lt;i class&#x3D;&quot;icon icon-angle-left&quot;&gt;&lt;&#x2F;i&gt; &#39; + __(&#39;pagination.prev&#39;), next_text: __(&#39;pagination.next&#39;) + &#39; &lt;i class&#x3D;&quot;icon icon-angle-right&quot;&gt;&lt;&#x2F;i&gt;&#39;, escape: false &#125;) %&gt; 恢复正常：","categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://preference-y.github.io/tags/hexo/"},{"name":"bug","slug":"bug","permalink":"https://preference-y.github.io/tags/bug/"}]},{"title":"git中fatal: Authentication failed的问题","slug":"git中fatal-Authentication-failed的问题","date":"2020-09-22T17:02:05.000Z","updated":"2020-09-22T17:02:57.078Z","comments":true,"path":"2020/09/23/git中fatal-Authentication-failed的问题/","link":"","permalink":"https://preference-y.github.io/2020/09/23/git%E4%B8%ADfatal-Authentication-failed%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"","text":"问题描述:有些情况下, 在进行git的远程操作的情况下, 会报一个这样的错误fatal: Authentication failed for &#39;http://对应的git仓库项目地址&#39;; 分析问题:报错的意思是凭证失效;我遇到的情况比较尴尬，手残输入了错误的密码，结果就一直报错，不再弹出输入账号密码的弹窗； 解决问题:1.在控制面板下找到凭据管理器, 如下图:2.点进去, 选择Windows凭据, 然后选择对应的那一条git凭据进行修改或者删除就OK.3.再次进行git操作时输入账号密码即可.","categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"git","slug":"git","permalink":"https://preference-y.github.io/tags/git/"}]},{"title":"Fiddler 弱网测试","slug":"Fiddler-弱网测试","date":"2020-09-22T16:48:23.000Z","updated":"2020-09-22T16:54:18.987Z","comments":true,"path":"2020/09/23/Fiddler-弱网测试/","link":"","permalink":"https://preference-y.github.io/2020/09/23/Fiddler-%E5%BC%B1%E7%BD%91%E6%B5%8B%E8%AF%95/","excerpt":"","text":"1、模拟弱网环境打开Fiddler，Rules-&gt;Performance-&gt;勾选 Simulate Modem Speeds，勾选之后访问网站会发现网络慢了很多 2、Fiddler弱网的原理Rules—&gt;Cutomize Rules打开CustomRules.js 文档在文件中搜索关键字，m_SimulateModem1. 123&#x2F;&#x2F; Cause Fiddler to delay HTTP traffic to simulate typical 56k modem conditions public static RulesOption(&quot;Simulate &amp;Modem Speeds&quot;, &quot;Per&amp;formance&quot;) var m_SimulateModem: boolean &#x3D; false; 2. 123456if (m_SimulateModem) &#123; &#x2F;&#x2F; Delay sends by 300ms per KB uploaded. oSession[&quot;request-trickle-delay&quot;] &#x3D; &quot;300&quot;; &#x2F;&#x2F; Delay receives by 150ms per KB downloaded. oSession[&quot;response-trickle-delay&quot;] &#x3D; &quot;150&quot;; &#125; 让我们来分析一下这几行代码： 首先来判断m_SimulateModem是否为true，也就是是否设置了弱网模式。 如果为弱网模式。则分析代码 oSession[“request-trickle-delay”] = “300”; 注释的也很明白，Delay sends by 300ms per KB uploaded.上传1KB需要300ms，转化一下上传速度：1Kb/0.3s = 10/3(KB/s)，也就是 3.33kb/s ，到达2G网络标准。 如果你想设置上传的速度为50KB/s，你则需要设置Delay 时间为 20ms 同样的方法，也可以限制上传的速度，调整oSession[“response-trickle-delay”]即可。 网络 上行 下载 2G 2.7K 9.6K 3G 1.8M 7.2M 4G 50M 100M 所以得出：2G网络配置 123456if (m_SimulateModem) &#123; &#x2F;&#x2F; Delay sends by 300ms per KB uploaded. oSession[&quot;request-trickle-delay&quot;] &#x3D; &quot;300&quot;; &#x2F;&#x2F; Delay receives by 150ms per KB downloaded. oSession[&quot;response-trickle-delay&quot;] &#x3D; &quot;150&quot;; &#125; 3G 网络配置,3G 应该是2G网络估值的1000倍速率，也就是上行和下载除去1000。 123456if (m_SimulateModem) &#123; &#x2F;&#x2F; Delay sends by 300ms per KB uploaded. oSession[&quot;request-trickle-delay&quot;] &#x3D; &quot;0.3&quot;; &#x2F;&#x2F; Delay receives by 150ms per KB downloaded. oSession[&quot;response-trickle-delay&quot;] &#x3D; &quot;0.15&quot;; &#125; 4G网络配置，上行为3G的25倍，下载为15倍，放开延迟即可。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Fiddler","slug":"Fiddler","permalink":"https://preference-y.github.io/tags/Fiddler/"},{"name":"抓包","slug":"抓包","permalink":"https://preference-y.github.io/tags/%E6%8A%93%E5%8C%85/"}]},{"title":"hexo博客pure主题使用Valine无后端评论系统","slug":"hexo博客pure主题使用Valine无后端评论系统","date":"2020-09-22T14:31:15.000Z","updated":"2020-09-22T14:32:36.406Z","comments":true,"path":"2020/09/22/hexo博客pure主题使用Valine无后端评论系统/","link":"","permalink":"https://preference-y.github.io/2020/09/22/hexo%E5%8D%9A%E5%AE%A2pure%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8Valine%E6%97%A0%E5%90%8E%E7%AB%AF%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"Valine一个无后端的评论框工具, 其依赖于 Leancloud 开发, 所以使用前需要先注册 Leancloud 账号如何开始? 你可以从 Valine-快速开始 教程开始, 教程包含了一步一步的指引教程. 获取APP ID 和 APP Key请先登录或注册 LeanCloud, 进入控制台后点击左下角创建应用：应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了： Valine配置项主题valine评论框提供了以下配置项 12345678910111213valine: # Valine官方地址: https://valine.js.org appid: # 你的 leancloud 应用 appid appkey: # 你的 leancloud 应用 appkey notify: true # 是否开始评论邮件提醒, 教程: https://github.com/xCss/Valine/wiki verify: false # 是否开始验证码功能, 开始邮件提醒会自动开启验证码功能 placeholder: 说点什么... # 输入框默认内容 avatar: mm # 头像展示方式, 具体设置项教程: https://valine.js.org/configuration.html#avatar meta: nick,mail,link # 自定义评论信息 pageSize: 10 # 评论列表分页 lang: zh-cn, # 多语言支持 zh-cn | en visitor: true # 文章阅读量统计: https://valine.js.org/visitor.html highlight: true # 代码高亮 recordIP: true # 记录评论者的IP 评论数据管理由于Valine 是无后端评论系统，所以也就没有开发评论数据管理功能。请自行登录Leancloud应用管理。具体步骤：登录&gt;选择你创建的应用&gt;存储&gt;选择Class Comment，然后就可以尽情的发挥你的权利啦(～￣▽￣)～","categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://preference-y.github.io/tags/hexo/"}]},{"title":"hexo博客pure主题添加404公益页面","slug":"hexo博客pure主题添加404公益页面","date":"2020-09-22T12:10:59.000Z","updated":"2020-09-22T12:31:20.314Z","comments":true,"path":"2020/09/22/hexo博客pure主题添加404公益页面/","link":"","permalink":"https://preference-y.github.io/2020/09/22/hexo%E5%8D%9A%E5%AE%A2pure%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0404%E5%85%AC%E7%9B%8A%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"GitHub Pages有提供制作404页面的指引：Custom 404 Pages。但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。 使用方法：新建404.html 页面，放到theme/pure主题的 source 目录下，内容如下： 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html;charset&#x3D;utf-8;&quot;&#x2F;&gt; &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge,chrome&#x3D;1&quot; &#x2F;&gt; &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;all&quot; &#x2F;&gt; &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;index,follow&quot;&#x2F;&gt; &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;style&#x2F;404style.css&quot;&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;script type&#x3D;&quot;text&#x2F;plain&quot; src&#x3D;&quot;http:&#x2F;&#x2F;www.qq.com&#x2F;404&#x2F;search_children.js&quot; charset&#x3D;&quot;utf-8&quot; homePageUrl&#x3D;&quot;&#x2F;&quot; homePageName&#x3D;&quot;回到我的主页&quot;&gt; &lt;&#x2F;script&gt; &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;data.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt; &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;page.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;","categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://preference-y.github.io/tags/hexo/"}]},{"title":"hexo博客的pure主题添加动态背景","slug":"hexo博客的pure主题添加动态背景","date":"2020-09-22T11:05:59.000Z","updated":"2020-09-22T12:31:13.448Z","comments":true,"path":"2020/09/22/hexo博客的pure主题添加动态背景/","link":"","permalink":"https://preference-y.github.io/2020/09/22/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84pure%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF/","excerpt":"","text":"修改 _layout.ejs打开 themes/主题名称/layout/layout.ejs在 &lt; /body&gt;之前添加代码（不要放在&lt; /head&gt;后）。 1234&lt;% if (theme.canvas_nest) &#123; %&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;color&#x3D;&quot;0,0,0&quot; opacity&#x3D;&#39;0.4&#39; zIndex&#x3D;&quot;-2&quot; count&#x3D;&quot;88&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;canvas-nest.js&#x2F;1.0.0&#x2F;canvas-nest.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;% &#125; %&gt; 可参照自己所用主题的 layout.ejs 中有 if 的那部分代码。 配置项说明1234color：线条颜色, 默认：&#39;0,0,0&#39;；三个数字分别为（R,G,B）opacity：线条透明度（0~1）, 默认：0.5count：线条的总数量，默认：150zIndex：背景的z-index属性，css属性用于控制所在层的位置，默认：-1 修改配置文件打开themes/主题名称/_config.yml，随意找一行，添加代码： 123456# --------------------------------------------------------------# background settings# --------------------------------------------------------------# add canvas-nest effect# see detail from https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;canvas-nest.jscanvas_nest: true 然后运行hexo s，在浏览器的地址栏输入localhost:4000就能看到效果了。参考：**距离**","categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://preference-y.github.io/tags/hexo/"}]},{"title":"Linux命令操作大全","slug":"Linux命令操作大全","date":"2020-09-22T10:19:30.000Z","updated":"2020-09-22T12:31:09.540Z","comments":true,"path":"2020/09/22/Linux命令操作大全/","link":"","permalink":"https://preference-y.github.io/2020/09/22/Linux%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/","excerpt":"","text":"1.系统信息 命令 arch 显示机器的处理器架构(1) uname -m 显示机器的处理器架构(2) uname -r 显示正在使用的内核版本 dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI) hdparm -i /dev/hda 罗列一个磁盘的架构特性 hdparm -tT /dev/sda 在磁盘上执行测试性读取操作 cat /proc/cpuinfo 显示CPU info的信息 cat /proc/interrupts 显示中断 cat /proc/meminfo 校验内存使用 cat /proc/swaps 显示哪些swap被使用 cat /proc/version 显示内核的版本 cat /proc/net/dev 显示网络适配器及统计 cat /proc/mounts 显示已加载的文件系统 lspci -tv 罗列 PCI 设备 lsusb -tv 显示 USB 设备 date 显示系统日期 cal 2007 显示2007年的日历表 date 041217002007.00 设置日期和时间 - 月日时分年.秒 clock -w 将时间修改保存到 BIOS 2.关机 (系统的关机、重启以及登出 ) 命令 shutdown -h now 关闭系统(1) init 0 关闭系统(2) telinit 0 关闭系统(3) shutdown -h hours:minutes &amp; 按预定时间关闭系统 shutdown -c 取消按预定时间关闭系统 shutdown -r now 重启(1) reboot 重启(2) logout 注销 3.文件和目录 命令 cd /home 进入 ‘/ home’ 目录’ cd .. 返回上一级目录 cd ../.. 返回上两级目录 cd 进入个人的主目录 cd ~user1 进入个人的主目录 cd - 返回上次所在的目录 pwd 显示工作路径 ls 查看目录中的文件 ls -F 查看目录中的文件 ls -l 显示文件和目录的详细资料 ls -a 显示隐藏文件 ls [0-9] 显示包含数字的文件名和目录名 tree 显示文件和目录由根目录开始的树形结构(1) lstree 显示文件和目录由根目录开始的树形结构(2) mkdir dir1 创建一个叫做 ‘dir1’ 的目录’ mkdir dir1 dir2 同时创建两个目录 mkdir -p /tmp/dir1/dir2 创建一个目录树 rm -f file1 删除一个叫做 ‘file1’ 的文件 rmdir dir1 删除一个叫做 ‘dir1’ 的目录’ rm -rf dir1 删除一个叫做 ‘dir1’ 的目录并同时删除其内容 rm -rf dir1 dir2 同时删除两个目录及它们的内容 mv dir1 new_dir 重命名/移动 一个目录 cp file1 file2 复制一个文件 cp dir/* . 复制一个目录下的所有文件到当前工作目录 cp -a /tmp/dir1 . 复制一个目录到当前工作目录 cp -a dir1 dir2 复制一个目录 ln -s file1 lnk1 创建一个指向文件或目录的软链接 ln file1 lnk1 创建一个指向文件或目录的物理链接 touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm) iconv -l 列出已知的编码 4.文件搜索 命令 find / -name file1 从 ‘/‘ 开始进入根文件系统搜索文件和目录 find / -user user1 搜索属于用户 ‘user1’ 的文件和目录 find /home/user1 -name \\*.bin 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件 find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件 find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件 find / -name \\*.rpm -exec chmod 755 ‘{}’ \\; 搜索以 ‘.rpm’ 结尾的文件并定义其权限 find / -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备 locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令 whereis halt 显示一个二进制文件、源码或man的位置 which halt 显示一个二进制文件或可执行文件的完整路径 5.挂载一个文件系统 命令 mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 ‘/ mnt/hda2’ 已经存在 umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 ‘/ mnt/hda2’ 退出 fuser -km /mnt/hda2 当设备繁忙时强制卸载 umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用 mount /dev/fd0 /mnt/floppy 挂载一个软盘 mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件 mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统 mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备 mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享 6.磁盘空间 命令 df -h 显示已经挂载的分区列表 ls -lSr &#124;more 以尺寸大小排列文件和目录 du -sh dir1 估算目录 ‘dir1’ 已经使用的磁盘空间’ du -sk * &#124; sort -rn 以容量大小为依据依次显示文件和目录的大小 rpm -q -a –qf ‘%10{SIZE}t%{NAME}n’ sort -k1,1n dpkg-query -W -f=’installed-size;10t{Package}n’ sort -k1,1n 7.用户和群组 命令 groupadd group_name 创建一个新用户组 groupdel group_name 删除一个用户组 groupmod -n new_group_name old_group_name 重命名一个用户组 useradd -c “Name Surname “ -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 “admin” 用户组的用户 useradd user1 创建一个新用户 userdel -r user1 删除一个用户 ( ‘-r’ 排除主目录) usermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性 passwd 修改口令 passwd user1 修改一个用户的口令 (只允许root执行) chage -E 2005-12-31 user1 设置用户口令的失效期限 pwck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户 grpck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组 newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组 9.文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消 命令 ls -lh 显示权限 ls /tmp &#124; pr -T5 -W$COLUMNS 将终端划分成5栏显示 chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限 chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限 chown user1 file1 改变一个文件的所有人属性 chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性 chgrp group1 file1 改变文件的群组 chown user1:group1 file1 改变一个文件的所有人和群组属性 find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件 chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限 chmod u-s /bin/file1 禁用一个二进制文件的 SUID位 chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的 chmod g-s /home/public 禁用一个目录的 SGID 位 chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件 chmod o-t /home/public 禁用一个目录的 STIKY 位 10.文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消 命令 chattr +a file1 只允许以追加方式读写文件 chattr +c file1 允许这个文件能被内核自动压缩/解压 chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件 chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接 chattr +s file1 允许一个文件被安全地删除 chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘 chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件 lsattr 显示特殊的属性 11.打包和压缩文件 命令 bunzip2 file1.bz2 解压一个叫做 ‘file1.bz2’的文件 bzip2 file1 压缩一个叫做 ‘file1’ 的文件 gunzip file1.gz 解压一个叫做 ‘file1.gz’的文件 gzip file1 压缩一个叫做 ‘file1’的文件 gzip -9 file1 最大程度压缩 rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包 rar a file1.rar file1 file2 dir1 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’ rar x file1.rar 解压rar包 unrar x file1.rar 解压rar包 tar -cvf archive.tar file1 创建一个非压缩的 tarball tar -cvf archive.tar file1 file2 dir1 创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件 tar -tf archive.tar 显示一个包中的内容 tar -xvf archive.tar 释放一个包 tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下 tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包 tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包 tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包 tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包 zip file1.zip file1 创建一个zip格式的压缩包 zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 unzip file1.zip 解压一个zip格式压缩包 12.RPM 包 - （Fedora, Redhat及类似系统） 命令 rpm -ivh package.rpm 安装一个rpm包 rpm -ivh –nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告 rpm -U package.rpm 更新一个rpm包但不改变其配置文件 rpm -F package.rpm 更新一个确定已经安装的rpm包 rpm -e package_name.rpm 删除一个rpm包 rpm -qa 显示系统中所有已经安装的rpm包 rpm -qa grep httpd rpm -qi package_name 获取一个已安装包的特殊信息 rpm -qg “System Environment/Daemons” 显示一个组件的rpm包 rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表 rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表 rpm -q package_name –whatrequires 显示与一个rpm包存在依赖关系的列表 rpm -q package_name –whatprovides 显示一个rpm包所占的体积 rpm -q package_name –scripts 显示在安装/删除期间所执行的脚本l rpm -q package_name –changelog 显示一个rpm包的修改历史 rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供 rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表 rpm –import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书 rpm –checksig package.rpm 确认一个rpm包的完整性 rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性 rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间 rpm -Va 检查系统中所有已安装的rpm包- 小心使用 rpm -Vp package.rpm 确认一个rpm包还未安装 rpm2cpio package.rpm cpio –extract –make-directories bin rpm -ivh /usr/src/redhat/RPMS/arch/package.rpm 从一个rpm源码安装一个构建好的包 rpmbuild –rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包 13.YUM 软件包升级器 - （Fedora, RedHat及类似系统） 命令 yum install package_name 下载并安装一个rpm包 yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系 yum update package_name.rpm 更新当前系统中所有安装的rpm包 yum update package_name 更新一个rpm包 yum remove package_name 删除一个rpm包 yum list 列出当前系统中安装的所有包 yum search package_name 在rpm仓库中搜寻软件包 yum clean packages 清理rpm缓存删除下载的包 yum clean headers 删除所有头文件 yum clean all 删除所有缓存的包和头文件 14.DEB 包 (Debian, Ubuntu 以及类似系统) 命令 dpkg -i package.deb 安装/更新一个 deb 包 dpkg -r package_name 从系统删除一个 deb 包 dpkg -l 显示系统中所有已经安装的 deb 包 dpkg -l grep httpd dpkg -s package_name 获得已经安装在系统中一个特殊包的信息 dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表 dpkg –contents package.deb 显示尚未安装的一个包所提供的文件列表 dpkg -S /bin/ping 确认所给的文件由哪个deb包提供 15.APT 软件工具 (Debian, Ubuntu 以及类似系统) 命令 apt-get install package_name 安装/更新一个 deb 包 apt-cdrom install package_name 从光盘安装/更新一个 deb 包 apt-get update 升级列表中的软件包 apt-get upgrade 升级所有已安装的软件 apt-get remove package_name 从系统删除一个deb包 apt-get check 确认依赖的软件仓库正确 apt-get clean 从下载的软件包中清理缓存 apt-cache search searched-package 返回包含所要搜索字符串的软件包名称 16.查看文件内容 命令 cat file1 从第一个字节开始正向查看文件的内容 tac file1 从最后一行开始反向查看一个文件的内容 more file1 查看一个长文件的内容 less file1 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作 head -2 file1 查看一个文件的前两行 tail -2 file1 查看一个文件的最后两行 tail -f /var/log/messages 实时查看被添加到一个文件中的内容 17.文本处理 命令 cat file1 file2 … command &lt;&gt; file1_in.txt_or_file1_out.txt cat file1 command( sed, grep, awk, grep, etc…) &gt; result.txt cat file1 command( sed, grep, awk, grep, etc…) &gt;&gt; result.txt grep Aug /var/log/messages 在文件 ‘/var/log/messages’中查找关键词”Aug” grep ^Aug /var/log/messages 在文件 ‘/var/log/messages’中查找以”Aug”开始的词汇 grep [0-9] /var/log/messages 选择 ‘/var/log/messages’ 文件中所有包含数字的行 grep Aug -R /var/log/* 在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug” sed ‘s/stringa1/stringa2/g’ example.txt 将example.txt文件中的 “string1” 替换成 “string2” sed ‘/^$/d’ example.txt 从example.txt文件中删除所有空白行 sed ‘/ *#/d; /^$/d’ example.txt 从example.txt文件中删除所有注释和空白行 echo ‘esempio’ tr ‘[:lower:]’ ‘[:upper:]’ sed -e ‘1d’ result.txt 从文件example.txt 中排除第一行 sed -n ‘/stringa1/p’ 查看只包含词汇 “string1”的行 sed -e ‘s/ *$//‘ example.txt 删除每一行最后的空白字符 sed -e ‘s/stringa1//g’ example.txt 从文档中只删除词汇 “string1” 并保留剩余全部 sed -n ‘1,5p;5q’ example.txt 查看从第一行到第5行内容 sed -n ‘5p;5q’ example.txt 查看第5行 sed -e ‘s/00*/0/g’ example.txt 用单个零替换多个零 cat -n file1 标示文件的行数 cat example.txt awk ‘NR%2==1’ echo a b c awk ‘{print $1}’ echo a b c awk ‘{print $1,$3}’ paste file1 file2 合并两个文件或两栏的内容 paste -d ‘+’ file1 file2 合并两个文件或两栏的内容，中间用”+”区分 sort file1 file2 排序两个文件的内容 sort file1 file2 &#124; uniq 取出两个文件的并集(重复的行只保留一份) sort file1 file2 &#124; uniq -u 删除交集，留下其他的行 sort file1 file2 &#124; uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件) comm -1 file1 file2 比较两个文件的内容只删除 ‘file1’ 所包含的内容 comm -2 file1 file2 比较两个文件的内容只删除 ‘file2’ 所包含的内容 comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分 18.字符设置和文件格式转换 命令 dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS recode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html recode -l &#124; more 显示所有允许的转换格式 19.文件系统分析 命令 badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块 fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性 fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性 fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 20.初始化一个文件系统 命令 mkfs /dev/hda1 在hda1分区创建一个文件系统 mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统 mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统 mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统 fdformat -n /dev/fd0 格式化一个软盘 mkswap /dev/hda3 创建一个swap文件系统 21.SWAP文件系统 命令 mkswap /dev/hda3 创建一个swap文件系统 swapon /dev/hda3 启用一个新的swap文件系统 swapon /dev/hda2 /dev/hdb3 启用两个swap分区 22.备份 命令 dump -0aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的完整备份 dump -1aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的交互式备份 restore -if /tmp/home0.bak 还原一个交互式备份 rsync -rogpav –delete /home /tmp 同步两边的目录 rsync -rogpav -e ssh –delete /home ip_address:/tmp 通过SSH通道rsync rsync -az -e ssh –delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录 rsync -az -e ssh –delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录 dd bs=1M if=/dev/hda gzip dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件 tar -Puf backup.tar /home/user 执行一次对 ‘/home/user’ 目录的交互式备份操作 ( cd /tmp/local/ &amp;&amp; tar c . ) ssh -C user@ip_addr ‘cd /home/share/ &amp;&amp; tar x -p’ ( tar c /home ) ssh -C user@ip_addr ‘cd /home/backup-home &amp;&amp; tar x -p’ tar cf - . (cd /tmp/backup ; tar xf - ) find /home/user1 -name ‘*.txt’ xargs cp -av –target-directory=/home/backup/ –parents find /var/log -name ‘*.log’ tar cv –files-from=- dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作 dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容 23.光盘 命令 cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容 mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件 mkisofs /dev/cdrom gzip &gt; cd_iso.gz mkisofs -J -allow-leading-dots -R -V “Label CD” -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件 cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件 gzip -dc cd_iso.gz &#124; cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件 mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件 cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中 cd-paranoia – “-3” 从一个CD光盘转录音轨到 wav 文件中（参数-3） cdrecord –scanbus 扫描总线以识别scsi通道 dd if=/dev/hdc &#124; md5sum 校验一个设备的md5sum编码，例如一张 CD 24.网络 - （以太网和WIFI无线） 命令 ifconfig eth0 显示一个以太网卡的配置 ifup eth0 启用一个 ‘eth0’ 网络设备 ifdown eth0 禁用一个 ‘eth0’ 网络设备 ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址 ifconfig eth0 promisc 设置 ‘eth0’ 成混杂模式以嗅探数据包 (sniffing) dhclient eth0 以dhcp模式启用 ‘eth0’ route -n show routing table route add -net 0/0 gw IP_Gateway configure default gateway route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network ‘192.168.0.0/16’ route del 0/0 gw IP_gateway remove static route echo “1” &gt; /proc/sys/net/ipv4/ip_forward activate ip routing hostname show hostname of system host www.example.com lookup hostname to resolve name to ip address and viceversa(1) nslookup www.example.com lookup hostname to resolve name to ip address and viceversa(2) ip link show show link status of all interfaces mii-tool eth0 show link status of ‘eth0’ ethtool eth0 show statistics of network card ‘eth0’ netstat -tup show all active network connections and their PID netstat -tupl show all network services listening on the system and their PID tcpdump tcp port 80 show all HTTP traffic iwlist scan show wireless networks iwconfig eth1 show configuration of a wireless network card whois www.example.com lookup on Whois database","categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://preference-y.github.io/tags/linux/"}]},{"title":"SQL笔记","slug":"SQL笔记","date":"2020-09-22T10:06:55.000Z","updated":"2020-09-22T12:31:07.060Z","comments":true,"path":"2020/09/22/SQL笔记/","link":"","permalink":"https://preference-y.github.io/2020/09/22/SQL%E7%AC%94%E8%AE%B0/","excerpt":"","text":"SQL 简介SQL = Structured Query Language总的来说，SQL语言定义了这么几种操作数据库的能力： DDL：Data Definition LanguageDDL允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。通常，DDL由数据库管理员执行。 DML：Data Manipulation LanguageDML为用户提供添加、删除、更新数据的能力，这些是应用程序对数据库的日常操作。 DQL：Data Query LanguageDQL允许用户查询数据，这也是通常最频繁的数据库日常操作。 数据库类别 关系型数据库(SQL) 非关系型数据库(NoSQL) - MongoDB, Cassandra, Dynamo 关系模型 主键主键是关系表中记录的唯一标识。选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。 123ALTER TABLE &lt;student&gt;ADD CONSTRAINT &lt;pk_id&gt;PRIMARY KEY (&lt;id&gt;); 外键外键是用来关联 2 个表结构的，表直接的约束分为以下 3 种： 一对一 一对多 - 外键建立在‘多’的表中(即从表) 多对多 - 需要建立中间表 创建外键 1234ALTER TABLE &lt;student&gt;ADD CONSTRAINT &lt;fk_class_id&gt;FOREIGN KEY (&lt;class_id&gt;)REFERENCES classes (&lt;id&gt;); 删除外键 12ALTER TABLE &lt;students&gt;DROP FOREIGN KEY &lt;fk_class_id&gt;; 索引索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。 12ALTER TABLE &lt;students&gt;ADD INDEX &lt;idx_name_score&gt; (&lt;name&gt;, &lt;score&gt;); 唯一索引12ALTER TABLE &lt;students&gt;ADD UNIQUE INDEX &lt;uni_name&gt; (&lt;name&gt;); 约束根据业务要求，像身份号、手机号、邮箱地址等，它们具有业务含义不易作为主键，但是又具有唯一性：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一约束。 123ALTER TABLE &lt;students&gt;ADD CONSTRAINT &lt;uni_name&gt;UNIQUE (&lt;name&gt;); SQL 查询不带 FROM 子句的 SELECT 语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效。许多检测工具会执行一条 SELECT 1; 来测试数据库连接。 基本查询 - SELECT * FROM &lt;students&gt; 条件查询 - SELECT * FROM &lt;students&gt; WHERE id = 1 投影查询 - SELECT id, name FROM &lt;students&gt; 排序 - SELECT * FROM &lt;students&gt; ORDER BY id DESC NOTE: OREDER BY 要在 WHERE 条件后 分页查询 - SELECT * FROM &lt;students&gt; LIMIT &lt;10&gt; OFFSET &lt;0&gt; pageSize - LIMIT pageIndex - OFFSET=pageSize * (pageIndex - 1), pageIndex 从 1 开始，而 OFFSET 从 0 开始。 聚合查询 聚合函数：COUNT(), SUM(), AVG(), MAX(), MIN() 通过 GROUP BY 进行分组 SELECT &lt;class_id&gt;, &lt;gender&gt;, COUNT(*) num FROM &lt;students&gt; GROUP BY &lt;class_id&gt;, &lt;gender&gt;; 多表查询 - SELECT * FROM &lt;students&gt;, &lt;classes&gt;; 获得的集合为 A 表行数 * B 表行数 连接查询 内连接(INNER JOIN) 外连接(OUTER JOIN) 左连接(LEFT OUTER JOIN) 右连接(RIGHT OUTER JOIN) 全连接(FULL OUTER JOIN) (MySQL不支持全连接可以使用union 连接 leftjoin和right join) INNER JOIN LEFT OUTER JOIN RIGHT OUTER JOIN FULL OUTER JOIN 两张表都存在的记录 左表存在的记录 右表存在的记录 左右表都存在的记录 SQL 修改关系数据库的基本操作就是增删改查，即 CRUD：Create、Delete、Update、Retrieve。对于增、删、改，对应的SQL语句分别是： INSERT：插入新记录 - INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...); UPDATE：更新已有记录 - UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...; DELETE：删除已有记录 - DELETE FROM &lt;表名&gt; WHERE ...; 常用 SQL 语句 数据库 + 表操作 SQL 语句 SQL 语句 含义 SHOW DATABASES 列出所有数据库 CREATE DATABASE 创建数据库 DROP DATABASE 删除数据库 USE 切换当前数据库 SHOW TABLES 列出所有表 DESC 查看表结构 SHOW CREATE TABLE 查看创建表的 SQL 语句 DROP TABLE 删除表 ALTER TABLE ADD COLUMN VARCHAR(10) NOT NULL 新增列 ALTER TABLE CHANGE COLUMN VARCHAR(20) NOT NULL 修改列属性 ALTER TABLE DROP COLUMN 删除列 EXIT 退出 MYSQL 连接 实用 SQL 语句 插入或替换 REPLACE INTO &lt;students&gt; (&lt;id&gt;, &lt;class_id&gt;, &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;...&gt;) 若 id=1 记录不存在，插入新纪录； 若 id=1 记录存在，当前 id=1 记录被删除，然后再插入新纪录。 插入或更新 INSERT INTO &lt;students&gt; (&lt;id&gt;, &lt;class_id&gt;, &lt;name&gt;, &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;&#39;xiao_min&#39;&gt;, &lt;...&gt;) ON DUPLICATE KEY UPDATE &lt;name&gt;=&lt;&#39;xiao_min&#39;&gt;, &lt;...&gt;; 若 id=1 记录不存在，插入新纪录； 若 id=1 记录存在，当前 id=1 记录被更新，更新字段有 UPDATE 指定。 插入或忽略 INSERT IGNORE INTO &lt;students&gt; (&lt;id&gt;, &lt;class_id&gt;, &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;...&gt;); 若 id=1记录不存在，INSERT 语句将插入新记录，否则，不执行任何操作。 快照 CREATE TABLE &lt;students_of_class1&gt; SELECT * FROM &lt;students&gt; WHERE &lt;class_id&gt;=&lt;1&gt;; 通过查询集合创建新表 事务操作多条语句作为一个整体进行操作的功能，被称为数据库事务。数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些 SQL 一样，不会对数据库数据有任何改动。 BEGIN 开启一个事务 COMMIT 提交一个事务 ROLLBACK 回滚事务 隔离级别 脏读 DIRTY READ： 查询同一记录，2 次结果不一样，读到还未 commit 的数据结果； 不可重复读 NON REPEATABLE READ： 查询同一记录，2 次结果不一样，读到的结果在另一事务 commit/rollback 之间； 幻读 PHANTOM READ：查询同一记录，2 次结果是一样，但是会出现 事务 A 新增的列，事务 B 读不到(SELECT)，但是却可以更新(UPDATE)，更新后才可以读到。 ISOLATION LEVEL DIRTY READ NON REPEATABLE READ PHANTOM READ READ UNCOMMITTED YES YES YES READ COMMITTED - YES YES Repeatable Read - - YES Serializable - - - Serializable 虽然隔离级别最高，但是效率会大大下降。","categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"sql","slug":"sql","permalink":"https://preference-y.github.io/tags/sql/"}]},{"title":"hexo搭建的博客增加搜索功能","slug":"hexo搭建的博客增加搜索功能","date":"2020-09-22T09:16:48.000Z","updated":"2020-09-22T12:31:11.527Z","comments":true,"path":"2020/09/22/hexo搭建的博客增加搜索功能/","link":"","permalink":"https://preference-y.github.io/2020/09/22/hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","excerpt":"","text":"具体操作1.安装搜索：在Hexo的根目录下，打开命令可执行窗口，执行如下命令： 1npm install hexo-generator-searchdb --save 2.blog目录下的全局配置文件_config.yml，新增如下内容： 12345search: path: search.xml field: post format: html limit: 10000 3.hexo主题配置文件（\\themes_config.yml），修改local_search的enable为true： 123456789# Local search# Dependencies: https:&#x2F;&#x2F;github.com&#x2F;flashlab&#x2F;hexo-generator-searchlocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1","categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://preference-y.github.io/tags/hexo/"}]},{"title":"Git配置多个SSHkey","slug":"Git配置多个SSHkey","date":"2020-09-21T13:13:30.000Z","updated":"2020-09-22T12:31:15.856Z","comments":true,"path":"2020/09/21/Git配置多个SSHkey/","link":"","permalink":"https://preference-y.github.io/2020/09/21/Git%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSHkey/","excerpt":"","text":"背景当有多个git账号时，比如：a. 一个gitee，用于公司内部的工作开发；b. 一个github，用于自己进行一些开发活动； 解决方法 生成一个公司用的SSH-Key $ ssh-keygen -t rsa -C &#39;xxxxx@company.com&#39; -f ~/.ssh/gitee_id_rsa 12345678910(注意修改为自己的 email ) ssh-keygen -t rsa -C &#x27;xxxxx@company.com&#x27; -f ~/.ssh/gitee_id_rsa 代码参数含义：-t 指定密钥类型，默认是 rsa ，可以省略。-C 设置注释文字，比如邮箱。-f 指定密钥文件存储文件名。注：可全部选择默认即为空格跳过 生成一个github用的SSH-Key $ ssh-keygen -t rsa -C &#39;xxxxx@qq.com&#39; -f ~/.ssh/github_id_rsa 在 ~/.ssh 目录下新建一个config文件，添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）12345678910# giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/gitee_id_rsa# githubHost github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github_id_rsa 用ssh命令分别测试$ ssh -T git@gitee.com$ ssh -T git@github.com这里以gitee为例，成功的话会返回下图内容","categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"git","slug":"git","permalink":"https://preference-y.github.io/tags/git/"}]},{"title":"解决git@github.com: Permission denied (publickey).","slug":"解决git-github-com-Permission-denied-publickey","date":"2020-09-21T13:04:18.000Z","updated":"2020-09-22T12:31:00.790Z","comments":true,"path":"2020/09/21/解决git-github-com-Permission-denied-publickey/","link":"","permalink":"https://preference-y.github.io/2020/09/21/%E8%A7%A3%E5%86%B3git-github-com-Permission-denied-publickey/","excerpt":"","text":"解决&#103;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;: Permission denied (publickey).原因分析Permission denied (publickey) 没有权限的publickey ，出现这错误一般是以下两种原因 客户端与服务端未生成 ssh key 客户端与服务端的ssh key不匹配 找到问题的原因了，解决办法也就有了，重新生成一次ssh key ，服务端也重新配置一次即可。 我的原因是因为没有在ssh客户端上运行ssh-agent后,使用ssh-add命令向ssh-agent添加私钥 客户端生成ssh key 123ssh-keygen -t rsa -C &quot;youremail@example.com&quot;XXX@qq.com改为自己的邮箱即可 途中会让你输入密码啥的，不需要管，一路回车即可，会生成你的ssh key。（在不改ssh key名称的情况下，如果重新生成的话会覆盖之前的ssh key。）然后再终端下执行命令： 12ssh -v git@github.com 最后两句会出现 123No more authentication methods to try. Permission denied (publickey). ** ssh客户端上运行ssh-agent后,就可以使用ssh-add命令向ssh-agent添加私钥在终端再执行以下命令 12ssh-agent -s 接着在执行 1234ssh-add ~&#x2F;.ssh&#x2F;id_rsaid_rsa是私钥的名字 如果执行后，提示执行ssh-add时出现Could not open a connection to your authentication agent执行如下命令 ssh-agent bash然后再执行 ssh-add ~/.ssh/id_rsa即可。Identity added: …这是ssh key文件路径的信息","categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"git","slug":"git","permalink":"https://preference-y.github.io/tags/git/"}]},{"title":"git常用命令","slug":"git常用命令","date":"2020-09-21T11:56:46.105Z","updated":"2020-09-22T12:31:24.388Z","comments":true,"path":"2020/09/21/git常用命令/","link":"","permalink":"https://preference-y.github.io/2020/09/21/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"一般来说，日常使用只要记住下图6个命令。 下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。 Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 一、新建代码库 12345678# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 二、配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。 123456789# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot; 三、增加/删除文件 123456789101112131415161718192021# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 四、代码提交 123456789101112131415161718# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ... 五、分支 123456789101112131415161718192021222324252627282930313233343536373839404142# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 六、标签 1234567891011121314151617181920212223242526# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 七、查看信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 八、远程同步 1234567891011121314151617181920212223# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all 九、撤销 12345678910111213141516171819202122232425262728293031# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop 十、其他 12# 生成一个可供发布的压缩包$ git archive 摘自阮一峰","categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://preference-y.github.io/tags/hexo/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2020-06-07T10:16:54.000Z","updated":"2020-09-22T14:45:26.884Z","comments":true,"path":"2020/06/07/我的第一篇博客/","link":"","permalink":"https://preference-y.github.io/2020/06/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"##第一章 内容 ——–##第二章 内容 ——–##第三章 内容 ——–##参考文献 内容","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-06-07T08:48:03.197Z","updated":"2020-06-07T08:48:03.197Z","comments":true,"path":"2020/06/07/hello-world/","link":"","permalink":"https://preference-y.github.io/2020/06/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://preference-y.github.io/tags/hexo/"},{"name":"bug","slug":"bug","permalink":"https://preference-y.github.io/tags/bug/"},{"name":"git","slug":"git","permalink":"https://preference-y.github.io/tags/git/"},{"name":"Fiddler","slug":"Fiddler","permalink":"https://preference-y.github.io/tags/Fiddler/"},{"name":"抓包","slug":"抓包","permalink":"https://preference-y.github.io/tags/%E6%8A%93%E5%8C%85/"},{"name":"linux","slug":"linux","permalink":"https://preference-y.github.io/tags/linux/"},{"name":"sql","slug":"sql","permalink":"https://preference-y.github.io/tags/sql/"}]}