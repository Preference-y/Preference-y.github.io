{"meta":{"title":"Hexo","subtitle":"","description":"","author":"Ning","url":"https://preference-y.github.io","root":"/"},"pages":[{"title":"关于","date":"2020-09-22T07:49:36.444Z","updated":"2020-09-22T07:49:36.444Z","comments":false,"path":"about/index.html","permalink":"https://preference-y.github.io/about/index.html","excerpt":"","text":"个人详细介绍: 无 Markdown 语法快速入门 Markdown 是一种轻量级标记语言，能将文本换成有效的XHTML(或者HTML)文档，它的目标是实现易读易写，成为一种适用于网络的书写语言。 Markdown 语言简单明了，易于掌握，所以用它来写作是件既效率又舒服的事情。我们所熟知的一些大型CMS，如Joomla、Drupal等都能很好的支持Markdown。我是因为写GitHub项目库中的Readme才开始接触Markdown。 Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。 Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。 Markdown 的理念是，能让文档更容易读、写和随意改。 Markdown 是一种书写的格式，HTML 是一种发布的格式。 Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 Headers 标题 123456# H1## H2### H3#### H4##### H5###### H6 另外，H1和H2还能用以下方式显示： 1234567一级标题===二级标题--- Emphasis 文本强调 123*斜体* or _强调_**加粗** or __加粗__***粗斜体*** or ___粗斜体__ 但是，如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号： 这是一段 *文本强调* 的说明示例。如果要在文字前后直接插入普通的星号或底线，你可以用反斜杠（转义符）： \\*这是一段被星号包围的文字\\* Lists 列表 Unordered 无序列表 12345678910111213* 无序列表子项1* 无序列表子项2* 无序列表子项3+ 无序列表子项1+ 无序列表子项2+ 无序列表子项3- 无序列表子项1- 无序列表子项2- 无序列表子项3 Ordered 有序列表 123456781. 有序列表子项12. 有序列表子项23. 有序列表子项31. 有序列表子项1- 有序列表子项2- 有序列表子项3 组合 1234567891011121314* 产品介绍（子项无项目符号） 此时子项要以一个制表符 或者 4个空格 缩进 * 产品特点 1. 特点1 2. 特点2 3. 特点3 * 产品功能 1. 功能1 - 功能2 - 功能3 可有时我们会出现这样的情况，首行内容是以日期或数字开头： 2019. 公司年度目标。为了避免也被转化成有序列表，我们可以在”.”前加上反斜杠（转义符）： 2019\\. 公司年度目标。 Links 链接（title为可选项） inline-style 内嵌方式 1234567891011语法： [link-text](url-link &quot;optional-tips&quot;) 解释： link-text：显示的链接文本 url-link：url链接 optional-tips：当鼠标放在 link-text 上显示的提示 示例： [Markdown快速入门](https://www.yuque.com/xiaokongping/md/quick-start &quot;Markdown快速入门&quot;) Reference-style 引用方式 123456789101112131415161718语法： [link-text][reference-id] [reference-id]:url-link &quot;optional-tips&quot; （在同一个文件的其它段落定义）解释： link-text: 显示的链接文本 reference-id: 链接的ID optional-tips：当鼠标放在 link-text 上显示的提示 示例： [百度搜索][baidu] [baidu]:www.baidu.com &quot;使用百度进行搜索&quot; 注意： [link-text][reference-id] 与 [reference-id]:url-link &quot;optional-tips&quot; 之间要至少有一行的的间距 Email 邮件 1&lt;mazhili1991@ailiyun.com&gt; Images 图片 inline-style 内嵌方式 1![替代文字](http://statics.w3cschool.cn/images/w3c/index-logo.png &quot;标题文字&quot;) Reference-style 引用方式 123![替代文字][logo][logo]: http://statics.w3cschool.cn/images/w3c/index-logo.png &quot;标题文字&quot; Code and Syntax Highlighting 代码和语法高亮 标记一小段行内代码 12345语法： `这是被包裹的文字` 示例： 不是因为寂寞才想你，只是因为`想你`才寂寞。 如果高亮的内容包含 ` 号，可以这样写 1`` `被包裹的文字` `` **语法高亮：** html代码 12```html &lt;div&gt;Syntax Highlighting&lt;/div&gt; 123456css代码&#96;&#96;&#96;markdown&#96;&#96;&#96;css body &#123; font-size: 12px; &#125; 12345JavaScript代码&#96;&#96;&#96;markdown&#96;&#96;&#96;javascript let s &#x3D; &#39;JavaScript syntax highlighting&#39; alert(s) 123456php代码&#96;&#96;&#96;markdown&#96;&#96;&#96;php &lt;?php echo &#39;Hello, World!&#39; ?&gt; 12345python代码&#96;&#96;&#96;markdown&#96;&#96;&#96;python s &#x3D; Python syntax highlighting print s 12345678910111213141516&lt;br &#x2F;&gt;&lt;a name&#x3D;&quot;Oi5PU&quot;&gt;&lt;&#x2F;a&gt;## Block Code 代码分组(代码区块)---Blockquotes 引用，在该行开头缩进4个空格或一个制表符(tab)&#96;&#96;&#96;markdown&gt; Email-style angle brackets&gt; are used for blockquotes.&gt; &gt; And, they can be nested.&gt; #### Headers in blockquotes&gt; * You can quote a list.&gt; * Etc. Hard Line Breaks 换行 在一行的结尾处加上2个或2个以上的空格，也可以使用标签 123456第一行文字 第二行文字或者第一行文字&lt;br&gt;第二行文字 Horizontal Rules 水平分割线 三种方式添加水平分割线 123456781： ***2： * * *3： - - - Escape character 转义符(反斜杠) Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果，你可以在星号的前面加上反斜杠 1\\*这里是被强调的文字\\* Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： 123456789101112\\反斜杠 `反引号 *星号 _下划线 &#123;&#125;花括号 []方括号 ()括弧 #井字号 +加号 -减号 .英文句 !感叹号 Addtional 补充：Markdown也支持传统的HTML标签。比如一个链接，你不太喜欢Markdown的写法，也可以直接写成： 1&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度一下&lt;/a&gt; 附录 Markdown 官网：http://daringfireball.net/projects/markdown/参考资料：https://markdown.tw/Markdown 在线编辑器： W3Cschool Markdown：https://www.w3cschool.cn/tools/index?name=markdown Markdown Here：https://markdown-here.com/livedemo.html"},{"title":"书单","date":"2020-06-07T10:30:31.481Z","updated":"2020-06-07T10:30:31.481Z","comments":false,"path":"books/index.html","permalink":"https://preference-y.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-09-21T07:16:16.552Z","updated":"2020-09-21T07:16:16.552Z","comments":false,"path":"categories/index.html","permalink":"https://preference-y.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-06-07T10:30:31.481Z","updated":"2020-06-07T10:30:31.481Z","comments":true,"path":"links/index.html","permalink":"https://preference-y.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-06-07T10:30:31.482Z","updated":"2020-06-07T10:30:31.482Z","comments":false,"path":"repository/index.html","permalink":"https://preference-y.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-09-21T07:16:16.568Z","updated":"2020-09-21T07:16:16.568Z","comments":false,"path":"tags/index.html","permalink":"https://preference-y.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SQL笔记","slug":"SQL笔记","date":"2020-09-22T10:06:55.000Z","updated":"2020-09-22T10:08:06.028Z","comments":true,"path":"2020/09/22/SQL笔记/","link":"","permalink":"https://preference-y.github.io/2020/09/22/SQL%E7%AC%94%E8%AE%B0/","excerpt":"","text":"SQL 简介SQL = Structured Query Language总的来说，SQL语言定义了这么几种操作数据库的能力： DDL：Data Definition LanguageDDL允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。通常，DDL由数据库管理员执行。 DML：Data Manipulation LanguageDML为用户提供添加、删除、更新数据的能力，这些是应用程序对数据库的日常操作。 DQL：Data Query LanguageDQL允许用户查询数据，这也是通常最频繁的数据库日常操作。 数据库类别 关系型数据库(SQL) 非关系型数据库(NoSQL) - MongoDB, Cassandra, Dynamo 关系模型 主键主键是关系表中记录的唯一标识。选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。 123ALTER TABLE &lt;student&gt;ADD CONSTRAINT &lt;pk_id&gt;PRIMARY KEY (&lt;id&gt;); 外键外键是用来关联 2 个表结构的，表直接的约束分为以下 3 种： 一对一 一对多 - 外键建立在‘多’的表中(即从表) 多对多 - 需要建立中间表 创建外键 1234ALTER TABLE &lt;student&gt;ADD CONSTRAINT &lt;fk_class_id&gt;FOREIGN KEY (&lt;class_id&gt;)REFERENCES classes (&lt;id&gt;); 删除外键 12ALTER TABLE &lt;students&gt;DROP FOREIGN KEY &lt;fk_class_id&gt;; 索引索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。 12ALTER TABLE &lt;students&gt;ADD INDEX &lt;idx_name_score&gt; (&lt;name&gt;, &lt;score&gt;); 唯一索引12ALTER TABLE &lt;students&gt;ADD UNIQUE INDEX &lt;uni_name&gt; (&lt;name&gt;); 约束根据业务要求，像身份号、手机号、邮箱地址等，它们具有业务含义不易作为主键，但是又具有唯一性：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一约束。 123ALTER TABLE &lt;students&gt;ADD CONSTRAINT &lt;uni_name&gt;UNIQUE (&lt;name&gt;); SQL 查询不带 FROM 子句的 SELECT 语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效。许多检测工具会执行一条 SELECT 1; 来测试数据库连接。 基本查询 - SELECT * FROM &lt;students&gt; 条件查询 - SELECT * FROM &lt;students&gt; WHERE id = 1 投影查询 - SELECT id, name FROM &lt;students&gt; 排序 - SELECT * FROM &lt;students&gt; ORDER BY id DESC NOTE: OREDER BY 要在 WHERE 条件后 分页查询 - SELECT * FROM &lt;students&gt; LIMIT &lt;10&gt; OFFSET &lt;0&gt; pageSize - LIMIT pageIndex - OFFSET=pageSize * (pageIndex - 1), pageIndex 从 1 开始，而 OFFSET 从 0 开始。 聚合查询 聚合函数：COUNT(), SUM(), AVG(), MAX(), MIN() 通过 GROUP BY 进行分组 SELECT &lt;class_id&gt;, &lt;gender&gt;, COUNT(*) num FROM &lt;students&gt; GROUP BY &lt;class_id&gt;, &lt;gender&gt;; 多表查询 - SELECT * FROM &lt;students&gt;, &lt;classes&gt;; 获得的集合为 A 表行数 * B 表行数 连接查询 内连接(INNER JOIN) 外连接(OUTER JOIN) 左连接(LEFT OUTER JOIN) 右连接(RIGHT OUTER JOIN) 全连接(FULL OUTER JOIN) (MySQL不支持全连接可以使用union 连接 leftjoin和right join) INNER JOIN LEFT OUTER JOIN RIGHT OUTER JOIN FULL OUTER JOIN 两张表都存在的记录 左表存在的记录 右表存在的记录 左右表都存在的记录 SQL 修改关系数据库的基本操作就是增删改查，即 CRUD：Create、Delete、Update、Retrieve。对于增、删、改，对应的SQL语句分别是： INSERT：插入新记录 - INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...); UPDATE：更新已有记录 - UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...; DELETE：删除已有记录 - DELETE FROM &lt;表名&gt; WHERE ...; 常用 SQL 语句 数据库 + 表操作 SQL 语句 SQL 语句 含义 SHOW DATABASES 列出所有数据库 CREATE DATABASE 创建数据库 DROP DATABASE 删除数据库 USE 切换当前数据库 SHOW TABLES 列出所有表 DESC 查看表结构 SHOW CREATE TABLE 查看创建表的 SQL 语句 DROP TABLE 删除表 ALTER TABLE ADD COLUMN VARCHAR(10) NOT NULL 新增列 ALTER TABLE CHANGE COLUMN VARCHAR(20) NOT NULL 修改列属性 ALTER TABLE DROP COLUMN 删除列 EXIT 退出 MYSQL 连接 实用 SQL 语句 插入或替换 REPLACE INTO &lt;students&gt; (&lt;id&gt;, &lt;class_id&gt;, &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;...&gt;) 若 id=1 记录不存在，插入新纪录； 若 id=1 记录存在，当前 id=1 记录被删除，然后再插入新纪录。 插入或更新 INSERT INTO &lt;students&gt; (&lt;id&gt;, &lt;class_id&gt;, &lt;name&gt;, &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;&#39;xiao_min&#39;&gt;, &lt;...&gt;) ON DUPLICATE KEY UPDATE &lt;name&gt;=&lt;&#39;xiao_min&#39;&gt;, &lt;...&gt;; 若 id=1 记录不存在，插入新纪录； 若 id=1 记录存在，当前 id=1 记录被更新，更新字段有 UPDATE 指定。 插入或忽略 INSERT IGNORE INTO &lt;students&gt; (&lt;id&gt;, &lt;class_id&gt;, &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;...&gt;); 若 id=1记录不存在，INSERT 语句将插入新记录，否则，不执行任何操作。 快照 CREATE TABLE &lt;students_of_class1&gt; SELECT * FROM &lt;students&gt; WHERE &lt;class_id&gt;=&lt;1&gt;; 通过查询集合创建新表 事务操作多条语句作为一个整体进行操作的功能，被称为数据库事务。数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些 SQL 一样，不会对数据库数据有任何改动。 BEGIN 开启一个事务 COMMIT 提交一个事务 ROLLBACK 回滚事务 隔离级别 脏读 DIRTY READ： 查询同一记录，2 次结果不一样，读到还未 commit 的数据结果； 不可重复读 NON REPEATABLE READ： 查询同一记录，2 次结果不一样，读到的结果在另一事务 commit/rollback 之间； 幻读 PHANTOM READ：查询同一记录，2 次结果是一样，但是会出现 事务 A 新增的列，事务 B 读不到(SELECT)，但是却可以更新(UPDATE)，更新后才可以读到。 ISOLATION LEVEL DIRTY READ NON REPEATABLE READ PHANTOM READ READ UNCOMMITTED YES YES YES READ COMMITTED - YES YES Repeatable Read - - YES Serializable - - - Serializable 虽然隔离级别最高，但是效率会大大下降。","categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"hexo搭建的博客增加搜索功能","slug":"hexo搭建的博客增加搜索功能","date":"2020-09-22T09:16:48.000Z","updated":"2020-09-22T09:17:51.878Z","comments":true,"path":"2020/09/22/hexo搭建的博客增加搜索功能/","link":"","permalink":"https://preference-y.github.io/2020/09/22/hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","excerpt":"","text":"具体操作1.安装搜索：在Hexo的根目录下，打开命令可执行窗口，执行如下命令： 1npm install hexo-generator-searchdb --save 2.blog目录下的全局配置文件_config.yml，新增如下内容： 12345search: path: search.xml field: post format: html limit: 10000 3.hexo主题配置文件（\\themes_config.yml），修改local_search的enable为true： 123456789# Local search# Dependencies: https:&#x2F;&#x2F;github.com&#x2F;flashlab&#x2F;hexo-generator-searchlocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1","categories":[],"tags":[]},{"title":"Git配置多个SSHkey","slug":"Git配置多个SSHkey","date":"2020-09-21T13:13:30.000Z","updated":"2020-09-21T13:13:51.557Z","comments":true,"path":"2020/09/21/Git配置多个SSHkey/","link":"","permalink":"https://preference-y.github.io/2020/09/21/Git%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSHkey/","excerpt":"","text":"背景当有多个git账号时，比如：a. 一个gitee，用于公司内部的工作开发；b. 一个github，用于自己进行一些开发活动； 解决方法 生成一个公司用的SSH-Key $ ssh-keygen -t rsa -C &#39;xxxxx@company.com&#39; -f ~/.ssh/gitee_id_rsa 12345678910(注意修改为自己的 email ) ssh-keygen -t rsa -C &#x27;xxxxx@company.com&#x27; -f ~/.ssh/gitee_id_rsa 代码参数含义：-t 指定密钥类型，默认是 rsa ，可以省略。-C 设置注释文字，比如邮箱。-f 指定密钥文件存储文件名。注：可全部选择默认即为空格跳过 生成一个github用的SSH-Key $ ssh-keygen -t rsa -C &#39;xxxxx@qq.com&#39; -f ~/.ssh/github_id_rsa 在 ~/.ssh 目录下新建一个config文件，添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）12345678910# giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/gitee_id_rsa# githubHost github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github_id_rsa 用ssh命令分别测试$ ssh -T git@gitee.com$ ssh -T git@github.com这里以gitee为例，成功的话会返回下图内容","categories":[],"tags":[]},{"title":"解决git@github.com: Permission denied (publickey).","slug":"解决git-github-com-Permission-denied-publickey","date":"2020-09-21T13:04:18.000Z","updated":"2020-09-21T13:05:35.208Z","comments":true,"path":"2020/09/21/解决git-github-com-Permission-denied-publickey/","link":"","permalink":"https://preference-y.github.io/2020/09/21/%E8%A7%A3%E5%86%B3git-github-com-Permission-denied-publickey/","excerpt":"","text":"解决git@github.com: Permission denied (publickey).原因分析Permission denied (publickey) 没有权限的publickey ，出现这错误一般是以下两种原因 客户端与服务端未生成 ssh key 客户端与服务端的ssh key不匹配 找到问题的原因了，解决办法也就有了，重新生成一次ssh key ，服务端也重新配置一次即可。 我的原因是因为没有在ssh客户端上运行ssh-agent后,使用ssh-add命令向ssh-agent添加私钥 客户端生成ssh key 123ssh-keygen -t rsa -C &quot;youremail@example.com&quot;XXX@qq.com改为自己的邮箱即可 途中会让你输入密码啥的，不需要管，一路回车即可，会生成你的ssh key。（在不改ssh key名称的情况下，如果重新生成的话会覆盖之前的ssh key。）然后再终端下执行命令： 12ssh -v git@github.com 最后两句会出现 123No more authentication methods to try. Permission denied (publickey). ** ssh客户端上运行ssh-agent后,就可以使用ssh-add命令向ssh-agent添加私钥在终端再执行以下命令 12ssh-agent -s 接着在执行 1234ssh-add ~&#x2F;.ssh&#x2F;id_rsaid_rsa是私钥的名字 如果执行后，提示执行ssh-add时出现Could not open a connection to your authentication agent执行如下命令 ssh-agent bash然后再执行 ssh-add ~/.ssh/id_rsa即可。Identity added: …这是ssh key文件路径的信息","categories":[],"tags":[]},{"title":"git常用命令","slug":"git常用命令","date":"2020-09-21T11:56:46.105Z","updated":"2020-09-21T12:24:01.794Z","comments":true,"path":"2020/09/21/git常用命令/","link":"","permalink":"https://preference-y.github.io/2020/09/21/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"一般来说，日常使用只要记住下图6个命令。 下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。 Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 一、新建代码库 12345678# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url] 二、配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。 123456789# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot; 三、增加/删除文件 123456789101112131415161718192021# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed] 四、代码提交 123456789101112131415161718# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ... 五、分支 123456789101112131415161718192021222324252627282930313233343536373839404142# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch] 六、标签 1234567891011121314151617181920212223242526# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag] 七、查看信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog 八、远程同步 1234567891011121314151617181920212223# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all 九、撤销 12345678910111213141516171819202122232425262728293031# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop 十、其他 12# 生成一个可供发布的压缩包$ git archive 摘自阮一峰","categories":[],"tags":[]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2020-06-07T10:16:54.000Z","updated":"2020-06-07T10:18:43.354Z","comments":true,"path":"2020/06/07/我的第一篇博客/","link":"","permalink":"https://preference-y.github.io/2020/06/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-06-07T08:48:03.197Z","updated":"2020-06-07T08:48:03.197Z","comments":true,"path":"2020/06/07/hello-world/","link":"","permalink":"https://preference-y.github.io/2020/06/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://preference-y.github.io/tags/%E7%AC%94%E8%AE%B0/"}]}