<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git配置多个SSHkey</title>
    <url>/2020/09/21/Git%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AASSHkey/</url>
    <content><![CDATA[<p><a name="article-header0"></a></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>当有多个git账号时，比如：<br />a. 一个gitee，用于公司内部的工作开发；<br />b. 一个github，用于自己进行一些开发活动；<br><a name="article-header1"></a></p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol>
<li>生成一个公司用的SSH-Key</li>
</ol>
<p><code>$ ssh-keygen -t rsa -C &#39;xxxxx@company.com&#39; -f ~/.ssh/gitee_id_rsa</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(注意修改为自己的 email ) </span><br><span class="line">ssh-keygen -t rsa -C &#x27;xxxxx@company.com&#x27; -f ~/.ssh/gitee_id_rsa</span><br><span class="line"> </span><br><span class="line"> 代码参数含义：</span><br><span class="line"></span><br><span class="line">-t 指定密钥类型，默认是 rsa ，可以省略。</span><br><span class="line">-C 设置注释文字，比如邮箱。</span><br><span class="line">-f 指定密钥文件存储文件名。</span><br><span class="line"></span><br><span class="line">注：可全部选择默认即为空格跳过</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/1464016/1600592788808-48350c9b-b92a-4d54-94da-ad0a6daf19c9.png#align=left&display=inline&height=422&margin=%5Bobject%20Object%5D&name=image.png&originHeight=422&originWidth=881&size=337950&status=done&style=none&width=881" alt="image.png"></p>
<ol start="2">
<li>生成一个github用的SSH-Key</li>
</ol>
<p><code>$ ssh-keygen -t rsa -C &#39;xxxxx@qq.com&#39; -f ~/.ssh/github_id_rsa</code></p>
<ol start="3">
<li>在 ~/.ssh 目录下新建一个config文件，添加如下内容（其中Host和HostName填写git服务器的域名，IdentityFile指定私钥的路径）<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gitee</span></span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitee_id_rsa</span><br><span class="line"><span class="meta">#</span><span class="bash"> github</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github_id_rsa</span><br></pre></td></tr></table></figure></li>
<li>用ssh命令分别测试<br /><code>$ ssh -T git@gitee.com</code><br /><code>$ ssh -T git@github.com</code><br />这里以gitee为例，成功的话会返回下图内容<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/1464016/1600693883785-f2d24c00-be1c-4281-a896-b0b96018a4d0.png#align=left&display=inline&height=160&margin=%5Bobject%20Object%5D&name=image.png&originHeight=160&originWidth=852&size=140561&status=done&style=none&width=852" alt="image.png"><br /></li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>SQL笔记</title>
    <url>/2020/09/22/SQL%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><a name="e28d2d92"></a></p>
<h2 id="SQL-简介"><a href="#SQL-简介" class="headerlink" title="SQL 简介"></a>SQL 简介</h2><p><br />SQL = Structured Query Language<br /><br><br />总的来说，SQL语言定义了这么几种操作数据库的能力：<br /></p>
<ul>
<li>DDL：Data Definition Language<br />DDL允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。通常，DDL由数据库管理员执行。</li>
<li>DML：Data Manipulation Language<br />DML为用户提供添加、删除、更新数据的能力，这些是应用程序对数据库的日常操作。</li>
<li>DQL：Data Query Language<br />DQL允许用户查询数据，这也是通常最频繁的数据库日常操作。</li>
</ul>
<p><a name="99ae2ecd"></a></p>
<h2 id="数据库类别"><a href="#数据库类别" class="headerlink" title="数据库类别"></a>数据库类别</h2><ul>
<li>关系型数据库(SQL)</li>
<li>非关系型数据库(NoSQL) - MongoDB, Cassandra, Dynamo</li>
</ul>
<p><a name="32231a60"></a></p>
<h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><p><a name="475cdfca"></a></p>
<h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p><br />主键是关系表中记录的唯一标识。选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。<br /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &lt;student&gt;</span><br><span class="line">ADD CONSTRAINT &lt;pk_id&gt;</span><br><span class="line">PRIMARY KEY (&lt;id&gt;);</span><br></pre></td></tr></table></figure>


<p><a name="f637ae4c"></a></p>
<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p><br />外键是用来关联 2 个表结构的，表直接的约束分为以下 3 种：<br /></p>
<ol>
<li>一对一</li>
<li>一对多 - 外键建立在‘多’的表中(即从表)</li>
<li>多对多 - 需要建立中间表</li>
</ol>
<ul>
<li><p>创建外键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &lt;student&gt;</span><br><span class="line">ADD CONSTRAINT &lt;fk_class_id&gt;</span><br><span class="line">FOREIGN KEY (&lt;class_id&gt;)</span><br><span class="line">REFERENCES classes (&lt;id&gt;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除外键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &lt;students&gt;</span><br><span class="line">DROP FOREIGN KEY &lt;fk_class_id&gt;;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p><a name="b271e427"></a></p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p><br />索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。<br /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &lt;students&gt;</span><br><span class="line">ADD INDEX &lt;idx_name_score&gt; (&lt;name&gt;, &lt;score&gt;);</span><br></pre></td></tr></table></figure>


<ul>
<li>唯一索引<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &lt;students&gt;</span><br><span class="line">ADD UNIQUE INDEX &lt;uni_name&gt; (&lt;name&gt;);</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p><a name="7db33d8b"></a></p>
<h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p><br />根据业务要求，像身份号、手机号、邮箱地址等，它们具有业务含义不易作为主键，但是又具有唯一性：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一约束。<br /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &lt;students&gt;</span><br><span class="line">ADD CONSTRAINT &lt;uni_name&gt;</span><br><span class="line">UNIQUE (&lt;name&gt;);</span><br></pre></td></tr></table></figure>


<p><a name="89f8857a"></a></p>
<h3 id="SQL-查询"><a href="#SQL-查询" class="headerlink" title="SQL 查询"></a>SQL 查询</h3><p><br />不带 <code>FROM</code> 子句的 <code>SELECT</code> 语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效。许多检测工具会执行一条 <code>SELECT 1;</code> 来测试数据库连接。<br /></p>
<ol>
<li>基本查询 - <code>SELECT * FROM &lt;students&gt;</code></li>
<li>条件查询 - <code>SELECT * FROM &lt;students&gt; WHERE id = 1</code></li>
<li>投影查询 - <code>SELECT id, name FROM &lt;students&gt;</code></li>
<li>排序 - <code>SELECT * FROM &lt;students&gt; ORDER BY id DESC</code> NOTE: <code>OREDER BY</code> 要在 <code>WHERE</code> 条件后</li>
<li>分页查询 - <code>SELECT * FROM &lt;students&gt; LIMIT &lt;10&gt; OFFSET &lt;0&gt;</code> <code>pageSize</code> - <code>LIMIT</code> <code>pageIndex</code> - <code>OFFSET</code>=<code>pageSize * (pageIndex - 1)</code>, <code>pageIndex</code> 从 <code>1</code> 开始，而 <code>OFFSET</code> 从 <code>0</code> 开始。</li>
<li>聚合查询 聚合函数：<code>COUNT(), SUM(), AVG(), MAX(), MIN()</code> 通过 <code>GROUP BY</code> 进行分组 <code>SELECT &lt;class_id&gt;, &lt;gender&gt;, COUNT(*) num FROM &lt;students&gt; GROUP BY &lt;class_id&gt;, &lt;gender&gt;;</code></li>
<li>多表查询 - <code>SELECT * FROM &lt;students&gt;, &lt;classes&gt;;</code> 获得的集合为 A 表行数 * B 表行数</li>
<li>连接查询<ul>
<li>内连接(INNER JOIN)</li>
<li>外连接(OUTER JOIN)<ul>
<li>左连接(LEFT OUTER JOIN)</li>
<li>右连接(RIGHT OUTER JOIN)</li>
<li>全连接(FULL OUTER JOIN) (MySQL不支持全连接可以使用union 连接 leftjoin和right join)<table>
<thead>
<tr>
<th>INNER JOIN</th>
<th>LEFT OUTER JOIN</th>
<th>RIGHT OUTER JOIN</th>
<th>FULL OUTER JOIN</th>
</tr>
</thead>
<tbody><tr>
<td>两张表都存在的记录</td>
<td>左表存在的记录</td>
<td>右表存在的记录</td>
<td>左右表都存在的记录</td>
</tr>
<tr>
<td><img src="https://cdn.nlark.com/yuque/0/2020/png/1464016/1600767455376-6ba5ed8a-e38d-4126-9760-fba135d1cfcf.png#align=left&display=inline&height=221&margin=%5Bobject%20Object%5D&name=image.png&originHeight=221&originWidth=293&size=32365&status=done&style=none&width=293" alt="image.png"></td>
<td><img src="https://cdn.nlark.com/yuque/0/2020/png/1464016/1600767496796-99e923bf-7000-4a74-948a-f53b85b293e7.png#align=left&display=inline&height=223&margin=%5Bobject%20Object%5D&name=image.png&originHeight=223&originWidth=293&size=41847&status=done&style=none&width=293" alt="image.png"></td>
<td><img src="https://cdn.nlark.com/yuque/0/2020/png/1464016/1600767547209-d1ed8302-f0a2-4c92-a3f2-872142664c90.png#align=left&display=inline&height=222&margin=%5Bobject%20Object%5D&name=image.png&originHeight=222&originWidth=291&size=43006&status=done&style=none&width=291" alt="image.png"></td>
<td><img src="https://cdn.nlark.com/yuque/0/2020/png/1464016/1600767574713-4f49791a-bc74-4c2e-ae25-6ca5193a06a3.png#align=left&display=inline&height=224&margin=%5Bobject%20Object%5D&name=image.png&originHeight=224&originWidth=294&size=51209&status=done&style=none&width=294" alt="image.png"></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><a name="66c2f83c"></a></p>
<h3 id="SQL-修改"><a href="#SQL-修改" class="headerlink" title="SQL 修改"></a>SQL 修改</h3><p><br />关系数据库的基本操作就是增删改查，即 <code>CRUD：Create、Delete、Update、Retrieve</code>。<br /><br><br />对于增、删、改，对应的SQL语句分别是：<br /></p>
<ul>
<li><code>INSERT</code>：插入新记录 - <code>INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...);</code></li>
<li><code>UPDATE</code>：更新已有记录 - <code>UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...;</code></li>
<li><code>DELETE</code>：删除已有记录 - <code>DELETE FROM &lt;表名&gt; WHERE ...;</code></li>
</ul>
<p><a name="b6cd86f0"></a></p>
<h2 id="常用-SQL-语句"><a href="#常用-SQL-语句" class="headerlink" title="常用 SQL 语句"></a>常用 SQL 语句</h2><p><a name="1000413c"></a></p>
<h3 id="数据库-表操作-SQL-语句"><a href="#数据库-表操作-SQL-语句" class="headerlink" title="数据库 + 表操作 SQL 语句"></a>数据库 + 表操作 SQL 语句</h3><table>
<thead>
<tr>
<th>SQL 语句</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>SHOW DATABASES</td>
<td>列出所有数据库</td>
</tr>
<tr>
<td>CREATE DATABASE <database_name></td>
<td>创建数据库</td>
</tr>
<tr>
<td>DROP DATABASE <database_name></td>
<td>删除数据库</td>
</tr>
<tr>
<td>USE <database_name></td>
<td>切换当前数据库</td>
</tr>
<tr>
<td>SHOW TABLES</td>
<td>列出所有表</td>
</tr>
<tr>
<td>DESC <table_name></td>
<td>查看表结构</td>
</tr>
<tr>
<td>SHOW CREATE TABLE <table_name></td>
<td>查看创建表的 SQL 语句</td>
</tr>
<tr>
<td>DROP TABLE <table_name></td>
<td>删除表</td>
</tr>
<tr>
<td>ALTER TABLE <table_name> ADD COLUMN <column_name> VARCHAR(10) NOT NULL</td>
<td>新增列</td>
</tr>
<tr>
<td>ALTER TABLE <table_name> CHANGE COLUMN <column_name> VARCHAR(20) NOT NULL</td>
<td>修改列属性</td>
</tr>
<tr>
<td>ALTER TABLE <table_name> DROP COLUMN <column_name></td>
<td>删除列</td>
</tr>
<tr>
<td>EXIT</td>
<td>退出 MYSQL 连接</td>
</tr>
</tbody></table>
<p><a name="b6f224db"></a></p>
<h3 id="实用-SQL-语句"><a href="#实用-SQL-语句" class="headerlink" title="实用 SQL 语句"></a>实用 SQL 语句</h3><ul>
<li>插入或替换 <code>REPLACE INTO &lt;students&gt; (&lt;id&gt;, &lt;class_id&gt;, &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;...&gt;)</code></li>
</ul>
<p>若 <code>id=1</code> 记录不存在，插入新纪录； 若 <code>id=1</code> 记录存在，当前 <code>id=1</code> 记录被删除，然后再插入新纪录。</p>
<ul>
<li>插入或更新 <code>INSERT INTO &lt;students&gt; (&lt;id&gt;, &lt;class_id&gt;, &lt;name&gt;, &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;&#39;xiao_min&#39;&gt;, &lt;...&gt;) ON DUPLICATE KEY UPDATE &lt;name&gt;=&lt;&#39;xiao_min&#39;&gt;, &lt;...&gt;;</code></li>
</ul>
<p>若 <code>id=1</code> 记录不存在，插入新纪录； 若 <code>id=1</code> 记录存在，当前 <code>id=1</code> 记录被更新，更新字段有 <code>UPDATE</code> 指定。</p>
<ul>
<li>插入或忽略 <code>INSERT IGNORE INTO &lt;students&gt; (&lt;id&gt;, &lt;class_id&gt;, &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;...&gt;);</code></li>
</ul>
<p>若 <code>id=1</code>记录不存在，<code>INSERT</code> 语句将插入新记录，否则，不执行任何操作。</p>
<ul>
<li><p>快照 <code>CREATE TABLE &lt;students_of_class1&gt; SELECT * FROM &lt;students&gt; WHERE &lt;class_id&gt;=&lt;1&gt;;</code></p>
<p>通过查询集合创建新表<br /></p>
</li>
</ul>
<p><a name="2d4877c9"></a></p>
<h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><p><br />多条语句作为一个整体进行操作的功能，被称为数据库事务。数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些 SQL 一样，不会对数据库数据有任何改动。<br /></p>
<ul>
<li><code>BEGIN</code> 开启一个事务</li>
<li><code>COMMIT</code> 提交一个事务</li>
<li><code>ROLLBACK</code> 回滚事务</li>
</ul>
<p><a name="2000d45b"></a></p>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><ul>
<li><strong>脏读 DIRTY READ</strong>： 查询同一记录，2 次结果<strong>不一样</strong>，读到还未 commit 的数据结果；</li>
<li><strong>不可重复读 NON REPEATABLE READ</strong>： 查询同一记录，2 次结果<strong>不一样</strong>，读到的结果在另一事务 commit/rollback 之间；</li>
<li><strong>幻读 PHANTOM READ</strong>：查询同一记录，2 次结果是<strong>一样</strong>，但是会出现 事务 A 新增的列，事务 B 读不到(<code>SELECT</code>)，但是却可以更新(<code>UPDATE</code>)，更新后才可以读到。<table>
<thead>
<tr>
<th>ISOLATION LEVEL</th>
<th>DIRTY READ</th>
<th>NON REPEATABLE READ</th>
<th>PHANTOM READ</th>
</tr>
</thead>
<tbody><tr>
<td>READ UNCOMMITTED</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>READ COMMITTED</td>
<td>-</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>Repeatable Read</td>
<td>-</td>
<td>-</td>
<td>YES</td>
</tr>
<tr>
<td>Serializable</td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody></table>
</li>
</ul>
<p><br /><strong>Serializable</strong> 虽然隔离级别最高，但是效率会大大下降。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客pure主题使用Valine无后端评论系统</title>
    <url>/2020/09/22/hexo%E5%8D%9A%E5%AE%A2pure%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8Valine%E6%97%A0%E5%90%8E%E7%AB%AF%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p><a name="aOvg0"></a></p>
<h2 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h2><p>一个无后端的评论框工具, 其依赖于 <a href="https://leancloud.cn/">Leancloud</a> 开发, 所以使用前需要先注册 <a href="https://leancloud.cn/">Leancloud</a> 账号<br />如何开始? 你可以从 <a href="https://valine.js.org/quickstart.html">Valine-快速开始</a> 教程开始, 教程包含了一步一步的指引教程.<br /></p>
<p><a name="AvWPY"></a></p>
<h2 id="获取APP-ID-和-APP-Key"><a href="#获取APP-ID-和-APP-Key" class="headerlink" title="获取APP ID 和 APP Key"></a>获取APP ID 和 APP Key</h2><p>请先<a href="https://leancloud.cn/dashboard/login.html#/signin">登录</a>或<a href="https://leancloud.cn/dashboard/login.html#/signup">注册</a> <code>LeanCloud</code>, 进入<a href="https://leancloud.cn/dashboard/applist.html#/apps">控制台</a>后点击左下角<a href="https://leancloud.cn/dashboard/applist.html#/newapp">创建应用</a>：<br /><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1464016/1600780153262-ad789d3f-a36d-46f7-b9c1-632fbab64b39.jpeg#align=left&display=inline&height=456&margin=%5Bobject%20Object%5D&originHeight=456&originWidth=616&size=0&status=done&style=none&width=616" alt=""><br />应用创建好以后，进入刚刚创建的应用，选择左下角的<code>设置</code>&gt;<code>应用Key</code>，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了：<br /><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/1464016/1600780153286-f8b64ffc-91b0-454f-9546-c09b20aae43f.jpeg#align=left&display=inline&height=533&margin=%5Bobject%20Object%5D&originHeight=533&originWidth=1202&size=0&status=done&style=none&width=1202" alt=""><br><a name="jxNzJ"></a></p>
<h5 id=""><a href="#" class="headerlink" title=""></a></h5><p><a name="x76kb"></a></p>
<h5 id="Valine配置项"><a href="#Valine配置项" class="headerlink" title="Valine配置项"></a>Valine配置项</h5><p>主题valine评论框提供了以下配置项</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span> <span class="comment"># Valine官方地址: https://valine.js.org</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="comment"># 你的 leancloud 应用 appid</span></span><br><span class="line">  <span class="attr">appkey:</span>  <span class="comment"># 你的 leancloud 应用 appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">true</span> <span class="comment"># 是否开始评论邮件提醒, 教程: https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># 是否开始验证码功能, 开始邮件提醒会自动开启验证码功能</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">说点什么...</span> <span class="comment"># 输入框默认内容</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># 头像展示方式, 具体设置项教程: https://valine.js.org/configuration.html#avatar</span></span><br><span class="line">  <span class="attr">meta:</span> <span class="string">nick,mail,link</span> <span class="comment"># 自定义评论信息</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># 评论列表分页</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-cn,</span> <span class="comment"># 多语言支持 zh-cn | en</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># 文章阅读量统计:  https://valine.js.org/visitor.html</span></span><br><span class="line">  <span class="attr">highlight:</span> <span class="literal">true</span> <span class="comment"># 代码高亮</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">true</span> <span class="comment"># 记录评论者的IP</span></span><br></pre></td></tr></table></figure>
<p><a name="uTjsL"></a></p>
<h2 id="评论数据管理"><a href="#评论数据管理" class="headerlink" title="评论数据管理"></a>评论数据管理</h2><p>由于Valine 是无后端评论系统，所以也就没有开发评论数据管理功能。请自行登录<code>Leancloud应用</code>管理。<br />具体步骤：<code>登录</code>&gt;<code>选择你创建的应用</code>&gt;<code>存储</code>&gt;选择Class <code>Comment</code>，然后就可以尽情的发挥你的权利啦(～￣▽￣)～<br /></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2020/09/21/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="一般来说，日常使用只要记住下图6个命令。"><a href="#一般来说，日常使用只要记住下图6个命令。" class="headerlink" title="一般来说，日常使用只要记住下图6个命令。"></a>一般来说，日常使用只要记住下图6个命令。</h1><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt="img"></p>
<p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p>
<blockquote>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
</blockquote>
<h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>
</blockquote>
<p>摘自<a href="http://www.ruanyifeng.com/">阮一峰</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客pure主题添加404公益页面</title>
    <url>/2020/09/22/hexo%E5%8D%9A%E5%AE%A2pure%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0404%E5%85%AC%E7%9B%8A%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p><a name="awi8Q"></a></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><strong>GitHub Pages有提供制作404页面的指引：</strong><a href="https://help.github.com/articles/custom-404-pages"><strong>Custom 404 Pages</strong></a><strong>。</strong><br /><strong>但是自定义404页面仅对绑定顶级域名的项目才起作用，GitHub默认分配的二级域名是不起作用的，使用hexo server在本机调试也是不起作用的。</strong></p>
<p><strong>使用方法：新建<code>404.html</code> 页面，放到theme/pure主题的 source 目录下，内容如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html;charset&#x3D;utf-8;&quot;&#x2F;&gt;</span><br><span class="line">  &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge,chrome&#x3D;1&quot; &#x2F;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;all&quot; &#x2F;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;robots&quot; content&#x3D;&quot;index,follow&quot;&#x2F;&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;style&#x2F;404style.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;plain&quot; src&#x3D;&quot;http:&#x2F;&#x2F;www.qq.com&#x2F;404&#x2F;search_children.js&quot;</span><br><span class="line">          charset&#x3D;&quot;utf-8&quot; homePageUrl&#x3D;&quot;&#x2F;&quot;</span><br><span class="line">          homePageName&#x3D;&quot;回到我的主页&quot;&gt;</span><br><span class="line">  &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;data.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;qzone.qq.com&#x2F;gy&#x2F;404&#x2F;page.js&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客的pure主题添加动态背景</title>
    <url>/2020/09/22/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84pure%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF/</url>
    <content><![CDATA[<p><a name="w4BJt"></a></p>
<h4 id="修改-layout-ejs"><a href="#修改-layout-ejs" class="headerlink" title="修改 _layout.ejs"></a>修改 _layout.ejs</h4><p>打开 <code>themes/主题名称/layout/layout.ejs</code><br />在 &lt; /body&gt;之前添加代码（不要放在&lt; /head&gt;后）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% if (theme.canvas_nest) &#123; %&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;</span><br><span class="line">color&#x3D;&quot;0,0,0&quot; opacity&#x3D;&#39;0.4&#39; zIndex&#x3D;&quot;-2&quot; count&#x3D;&quot;88&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;canvas-nest.js&#x2F;1.0.0&#x2F;canvas-nest.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>
<p>可参照自己所用主题的 layout.ejs 中有 if 的那部分代码。<br><a name="NE6dl"></a></p>
<h4 id="配置项说明"><a href="#配置项说明" class="headerlink" title="配置项说明"></a>配置项说明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">color：线条颜色, 默认：&#39;0,0,0&#39;；三个数字分别为（R,G,B）</span><br><span class="line">opacity：线条透明度（0~1）, 默认：0.5</span><br><span class="line">count：线条的总数量，默认：150</span><br><span class="line">zIndex：背景的z-index属性，css属性用于控制所在层的位置，默认：-1</span><br></pre></td></tr></table></figure>
<p><a name="Vt77Y"></a></p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开<code>themes/主题名称/_config.yml</code>，随意找一行，添加代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># --------------------------------------------------------------</span><br><span class="line"># background settings</span><br><span class="line"># --------------------------------------------------------------</span><br><span class="line"># add canvas-nest effect</span><br><span class="line"># see detail from https:&#x2F;&#x2F;github.com&#x2F;hustcc&#x2F;canvas-nest.js</span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure>
<p>然后运行<code>hexo s</code>，在浏览器的地址栏输入<code>localhost:4000</code>就能看到效果了。<br /><br><br />参考：<strong><a href="https://shenzekun.github.io/hexo%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF.html">距离</a></strong></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建的博客增加搜索功能</title>
    <url>/2020/09/22/hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p><a name="aNUKB"></a></p>
<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><p>1.安装搜索：在Hexo的根目录下，打开命令可执行窗口，执行如下命令：<br /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>2.blog目录下的全局配置文件_config.yml，新增如下内容：<br /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<p>3.hexo主题配置文件（\themes_config.yml），修改local_search的enable为true：<br /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;flashlab&#x2F;hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure>

<br />
<br />
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2020/06/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>##第一章 内容 ——–<br>##第二章 内容 ——–<br>##第三章 内容 ——–<br>##参考文献 内容</p>
]]></content>
  </entry>
  <entry>
    <title>Linux命令操作大全</title>
    <url>/2020/09/22/Linux%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<p><a name="UMAS8"></a></p>
<h3 id="1-系统信息"><a href="#1-系统信息" class="headerlink" title="1.系统信息"></a>1.系统信息</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">arch</td>
<td align="left">显示机器的处理器架构(1)</td>
</tr>
<tr>
<td align="left">uname -m</td>
<td align="left">显示机器的处理器架构(2)</td>
</tr>
<tr>
<td align="left">uname -r</td>
<td align="left">显示正在使用的内核版本</td>
</tr>
<tr>
<td align="left">dmidecode -q</td>
<td align="left">显示硬件系统部件 - (SMBIOS / DMI)</td>
</tr>
<tr>
<td align="left">hdparm -i /dev/hda</td>
<td align="left">罗列一个磁盘的架构特性</td>
</tr>
<tr>
<td align="left">hdparm -tT /dev/sda</td>
<td align="left">在磁盘上执行测试性读取操作</td>
</tr>
<tr>
<td align="left">cat /proc/cpuinfo</td>
<td align="left">显示CPU info的信息</td>
</tr>
<tr>
<td align="left">cat /proc/interrupts</td>
<td align="left">显示中断</td>
</tr>
<tr>
<td align="left">cat /proc/meminfo</td>
<td align="left">校验内存使用</td>
</tr>
<tr>
<td align="left">cat /proc/swaps</td>
<td align="left">显示哪些swap被使用</td>
</tr>
<tr>
<td align="left">cat /proc/version</td>
<td align="left">显示内核的版本</td>
</tr>
<tr>
<td align="left">cat /proc/net/dev</td>
<td align="left">显示网络适配器及统计</td>
</tr>
<tr>
<td align="left">cat /proc/mounts</td>
<td align="left">显示已加载的文件系统</td>
</tr>
<tr>
<td align="left">lspci -tv</td>
<td align="left">罗列 PCI 设备</td>
</tr>
<tr>
<td align="left">lsusb -tv</td>
<td align="left">显示 USB 设备</td>
</tr>
<tr>
<td align="left">date</td>
<td align="left">显示系统日期</td>
</tr>
<tr>
<td align="left">cal 2007</td>
<td align="left">显示2007年的日历表</td>
</tr>
<tr>
<td align="left">date 041217002007.00</td>
<td align="left">设置日期和时间 - 月日时分年.秒</td>
</tr>
<tr>
<td align="left">clock -w</td>
<td align="left">将时间修改保存到 BIOS</td>
</tr>
</tbody></table>
<p><a name="oHuaS"></a></p>
<h3 id="2-关机-系统的关机、重启以及登出"><a href="#2-关机-系统的关机、重启以及登出" class="headerlink" title="2.关机 (系统的关机、重启以及登出 )"></a>2.关机 (系统的关机、重启以及登出 )</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">shutdown -h now</td>
<td align="left">关闭系统(1)</td>
</tr>
<tr>
<td align="left">init 0</td>
<td align="left">关闭系统(2)</td>
</tr>
<tr>
<td align="left">telinit 0</td>
<td align="left">关闭系统(3)</td>
</tr>
<tr>
<td align="left">shutdown -h hours:minutes &amp;</td>
<td align="left">按预定时间关闭系统</td>
</tr>
<tr>
<td align="left">shutdown -c</td>
<td align="left">取消按预定时间关闭系统</td>
</tr>
<tr>
<td align="left">shutdown -r now</td>
<td align="left">重启(1)</td>
</tr>
<tr>
<td align="left">reboot</td>
<td align="left">重启(2)</td>
</tr>
<tr>
<td align="left">logout</td>
<td align="left">注销</td>
</tr>
</tbody></table>
<p><a name="nGv9L"></a></p>
<h3 id="3-文件和目录"><a href="#3-文件和目录" class="headerlink" title="3.文件和目录"></a>3.文件和目录</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">cd /home</td>
<td align="left">进入 ‘/ home’ 目录’</td>
</tr>
<tr>
<td align="left">cd ..</td>
<td align="left">返回上一级目录</td>
</tr>
<tr>
<td align="left">cd ../..</td>
<td align="left">返回上两级目录</td>
</tr>
<tr>
<td align="left">cd</td>
<td align="left">进入个人的主目录</td>
</tr>
<tr>
<td align="left">cd ~user1</td>
<td align="left">进入个人的主目录</td>
</tr>
<tr>
<td align="left">cd -</td>
<td align="left">返回上次所在的目录</td>
</tr>
<tr>
<td align="left">pwd</td>
<td align="left">显示工作路径</td>
</tr>
<tr>
<td align="left">ls</td>
<td align="left">查看目录中的文件</td>
</tr>
<tr>
<td align="left">ls -F</td>
<td align="left">查看目录中的文件</td>
</tr>
<tr>
<td align="left">ls -l</td>
<td align="left">显示文件和目录的详细资料</td>
</tr>
<tr>
<td align="left">ls -a</td>
<td align="left">显示隐藏文件</td>
</tr>
<tr>
<td align="left">ls [0-9]</td>
<td align="left">显示包含数字的文件名和目录名</td>
</tr>
<tr>
<td align="left">tree</td>
<td align="left">显示文件和目录由根目录开始的树形结构(1)</td>
</tr>
<tr>
<td align="left">lstree</td>
<td align="left">显示文件和目录由根目录开始的树形结构(2)</td>
</tr>
<tr>
<td align="left">mkdir dir1</td>
<td align="left">创建一个叫做 ‘dir1’ 的目录’</td>
</tr>
<tr>
<td align="left">mkdir dir1 dir2</td>
<td align="left">同时创建两个目录</td>
</tr>
<tr>
<td align="left">mkdir -p /tmp/dir1/dir2</td>
<td align="left">创建一个目录树</td>
</tr>
<tr>
<td align="left">rm -f file1</td>
<td align="left">删除一个叫做 ‘file1’ 的文件</td>
</tr>
<tr>
<td align="left">rmdir dir1</td>
<td align="left">删除一个叫做 ‘dir1’ 的目录’</td>
</tr>
<tr>
<td align="left">rm -rf dir1</td>
<td align="left">删除一个叫做 ‘dir1’ 的目录并同时删除其内容</td>
</tr>
<tr>
<td align="left">rm -rf dir1 dir2</td>
<td align="left">同时删除两个目录及它们的内容</td>
</tr>
<tr>
<td align="left">mv dir1 new_dir</td>
<td align="left">重命名/移动 一个目录</td>
</tr>
<tr>
<td align="left">cp file1 file2</td>
<td align="left">复制一个文件</td>
</tr>
<tr>
<td align="left">cp dir/* .</td>
<td align="left">复制一个目录下的所有文件到当前工作目录</td>
</tr>
<tr>
<td align="left">cp -a /tmp/dir1 .</td>
<td align="left">复制一个目录到当前工作目录</td>
</tr>
<tr>
<td align="left">cp -a dir1 dir2</td>
<td align="left">复制一个目录</td>
</tr>
<tr>
<td align="left">ln -s file1 lnk1</td>
<td align="left">创建一个指向文件或目录的软链接</td>
</tr>
<tr>
<td align="left">ln file1 lnk1</td>
<td align="left">创建一个指向文件或目录的物理链接</td>
</tr>
<tr>
<td align="left">touch -t 0712250000 file1</td>
<td align="left">修改一个文件或目录的时间戳 - (YYMMDDhhmm)</td>
</tr>
<tr>
<td align="left">iconv -l</td>
<td align="left">列出已知的编码</td>
</tr>
</tbody></table>
<p><a name="nsGFP"></a></p>
<h3 id="4-文件搜索"><a href="#4-文件搜索" class="headerlink" title="4.文件搜索"></a>4.文件搜索</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">find / -name file1</td>
<td align="left">从 ‘/‘ 开始进入根文件系统搜索文件和目录</td>
</tr>
<tr>
<td align="left">find / -user user1</td>
<td align="left">搜索属于用户 ‘user1’ 的文件和目录</td>
</tr>
<tr>
<td align="left">find /home/user1 -name \*.bin</td>
<td align="left">在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件</td>
</tr>
<tr>
<td align="left">find /usr/bin -type f -atime +100</td>
<td align="left">搜索在过去100天内未被使用过的执行文件</td>
</tr>
<tr>
<td align="left">find /usr/bin -type f -mtime -10</td>
<td align="left">搜索在10天内被创建或者修改过的文件</td>
</tr>
<tr>
<td align="left">find / -name \*.rpm -exec chmod 755 ‘{}’ \;</td>
<td align="left">搜索以 ‘.rpm’ 结尾的文件并定义其权限</td>
</tr>
<tr>
<td align="left">find / -xdev -name *.rpm</td>
<td align="left">搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备</td>
</tr>
<tr>
<td align="left">locate *.ps</td>
<td align="left">寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令</td>
</tr>
<tr>
<td align="left">whereis halt</td>
<td align="left">显示一个二进制文件、源码或man的位置</td>
</tr>
<tr>
<td align="left">which halt</td>
<td align="left">显示一个二进制文件或可执行文件的完整路径</td>
</tr>
</tbody></table>
<p><a name="8vgWs"></a></p>
<h3 id="5-挂载一个文件系统"><a href="#5-挂载一个文件系统" class="headerlink" title="5.挂载一个文件系统"></a>5.挂载一个文件系统</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">mount /dev/hda2 /mnt/hda2</td>
<td align="left">挂载一个叫做hda2的盘 - 确定目录 ‘/ mnt/hda2’ 已经存在</td>
</tr>
<tr>
<td align="left">umount /dev/hda2</td>
<td align="left">卸载一个叫做hda2的盘 - 先从挂载点 ‘/ mnt/hda2’ 退出</td>
</tr>
<tr>
<td align="left">fuser -km /mnt/hda2</td>
<td align="left">当设备繁忙时强制卸载</td>
</tr>
<tr>
<td align="left">umount -n /mnt/hda2</td>
<td align="left">运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用</td>
</tr>
<tr>
<td align="left">mount /dev/fd0 /mnt/floppy</td>
<td align="left">挂载一个软盘</td>
</tr>
<tr>
<td align="left">mount /dev/cdrom /mnt/cdrom</td>
<td align="left">挂载一个cdrom或dvdrom</td>
</tr>
<tr>
<td align="left">mount /dev/hdc /mnt/cdrecorder</td>
<td align="left">挂载一个cdrw或dvdrom</td>
</tr>
<tr>
<td align="left">mount /dev/hdb /mnt/cdrecorder</td>
<td align="left">挂载一个cdrw或dvdrom</td>
</tr>
<tr>
<td align="left">mount -o loop file.iso /mnt/cdrom</td>
<td align="left">挂载一个文件或ISO镜像文件</td>
</tr>
<tr>
<td align="left">mount -t vfat /dev/hda5 /mnt/hda5</td>
<td align="left">挂载一个Windows FAT32文件系统</td>
</tr>
<tr>
<td align="left">mount /dev/sda1 /mnt/usbdisk</td>
<td align="left">挂载一个usb 捷盘或闪存设备</td>
</tr>
<tr>
<td align="left">mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share</td>
<td align="left">挂载一个windows网络共享</td>
</tr>
</tbody></table>
<p><a name="1BsXL"></a></p>
<h3 id="6-磁盘空间"><a href="#6-磁盘空间" class="headerlink" title="6.磁盘空间"></a>6.磁盘空间</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">df -h</td>
<td align="left">显示已经挂载的分区列表</td>
</tr>
<tr>
<td align="left">ls -lSr &#124;more</td>
<td align="left">以尺寸大小排列文件和目录</td>
</tr>
<tr>
<td align="left">du -sh dir1</td>
<td align="left">估算目录 ‘dir1’ 已经使用的磁盘空间’</td>
</tr>
<tr>
<td align="left">du -sk * &#124; sort -rn</td>
<td align="left">以容量大小为依据依次显示文件和目录的大小</td>
</tr>
<tr>
<td align="left">rpm -q -a –qf ‘%10{SIZE}t%{NAME}n’</td>
<td align="left">sort -k1,1n</td>
</tr>
<tr>
<td align="left">dpkg-query -W -f=’installed-size;10t{Package}n’</td>
<td align="left">sort -k1,1n</td>
</tr>
</tbody></table>
<p><a name="iCI16"></a></p>
<h3 id="7-用户和群组"><a href="#7-用户和群组" class="headerlink" title="7.用户和群组"></a>7.用户和群组</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">groupadd group_name</td>
<td align="left">创建一个新用户组</td>
</tr>
<tr>
<td align="left">groupdel group_name</td>
<td align="left">删除一个用户组</td>
</tr>
<tr>
<td align="left">groupmod -n new_group_name old_group_name</td>
<td align="left">重命名一个用户组</td>
</tr>
<tr>
<td align="left">useradd -c “Name Surname “ -g admin -d /home/user1 -s /bin/bash user1</td>
<td align="left">创建一个属于 “admin” 用户组的用户</td>
</tr>
<tr>
<td align="left">useradd user1</td>
<td align="left">创建一个新用户</td>
</tr>
<tr>
<td align="left">userdel -r user1</td>
<td align="left">删除一个用户 ( ‘-r’ 排除主目录)</td>
</tr>
<tr>
<td align="left">usermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1</td>
<td align="left">修改用户属性</td>
</tr>
<tr>
<td align="left">passwd</td>
<td align="left">修改口令</td>
</tr>
<tr>
<td align="left">passwd user1</td>
<td align="left">修改一个用户的口令 (只允许root执行)</td>
</tr>
<tr>
<td align="left">chage -E 2005-12-31 user1</td>
<td align="left">设置用户口令的失效期限</td>
</tr>
<tr>
<td align="left">pwck</td>
<td align="left">检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户</td>
</tr>
<tr>
<td align="left">grpck</td>
<td align="left">检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组</td>
</tr>
<tr>
<td align="left">newgrp group_name</td>
<td align="left">登陆进一个新的群组以改变新创建文件的预设群组</td>
</tr>
</tbody></table>
<p><a name="XHXHx"></a></p>
<h3 id="9-文件的权限-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#9-文件的权限-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="9.文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>9.文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">ls -lh</td>
<td align="left">显示权限</td>
</tr>
<tr>
<td align="left">ls /tmp &#124; pr -T5 -W$COLUMNS</td>
<td align="left">将终端划分成5栏显示</td>
</tr>
<tr>
<td align="left">chmod ugo+rwx directory1</td>
<td align="left">设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</td>
</tr>
<tr>
<td align="left">chmod go-rwx directory1</td>
<td align="left">删除群组(g)与其他人(o)对目录的读写执行权限</td>
</tr>
<tr>
<td align="left">chown user1 file1</td>
<td align="left">改变一个文件的所有人属性</td>
</tr>
<tr>
<td align="left">chown -R user1 directory1</td>
<td align="left">改变一个目录的所有人属性并同时改变改目录下所有文件的属性</td>
</tr>
<tr>
<td align="left">chgrp group1 file1</td>
<td align="left">改变文件的群组</td>
</tr>
<tr>
<td align="left">chown user1:group1 file1</td>
<td align="left">改变一个文件的所有人和群组属性</td>
</tr>
<tr>
<td align="left">find / -perm -u+s</td>
<td align="left">罗列一个系统中所有使用了SUID控制的文件</td>
</tr>
<tr>
<td align="left">chmod u+s /bin/file1</td>
<td align="left">设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</td>
</tr>
<tr>
<td align="left">chmod u-s /bin/file1</td>
<td align="left">禁用一个二进制文件的 SUID位</td>
</tr>
<tr>
<td align="left">chmod g+s /home/public</td>
<td align="left">设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</td>
</tr>
<tr>
<td align="left">chmod g-s /home/public</td>
<td align="left">禁用一个目录的 SGID 位</td>
</tr>
<tr>
<td align="left">chmod o+t /home/public</td>
<td align="left">设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</td>
</tr>
<tr>
<td align="left">chmod o-t /home/public</td>
<td align="left">禁用一个目录的 STIKY 位</td>
</tr>
</tbody></table>
<p><a name="XIkLN"></a></p>
<h3 id="10-文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#10-文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="10.文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>10.文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">chattr +a file1</td>
<td align="left">只允许以追加方式读写文件</td>
</tr>
<tr>
<td align="left">chattr +c file1</td>
<td align="left">允许这个文件能被内核自动压缩/解压</td>
</tr>
<tr>
<td align="left">chattr +d file1</td>
<td align="left">在进行文件系统备份时，dump程序将忽略这个文件</td>
</tr>
<tr>
<td align="left">chattr +i file1</td>
<td align="left">设置成不可变的文件，不能被删除、修改、重命名或者链接</td>
</tr>
<tr>
<td align="left">chattr +s file1</td>
<td align="left">允许一个文件被安全地删除</td>
</tr>
<tr>
<td align="left">chattr +S file1</td>
<td align="left">一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</td>
</tr>
<tr>
<td align="left">chattr +u file1</td>
<td align="left">若文件被删除，系统会允许你在以后恢复这个被删除的文件</td>
</tr>
<tr>
<td align="left">lsattr</td>
<td align="left">显示特殊的属性</td>
</tr>
</tbody></table>
<p><a name="jGx9e"></a></p>
<h3 id="11-打包和压缩文件"><a href="#11-打包和压缩文件" class="headerlink" title="11.打包和压缩文件"></a>11.打包和压缩文件</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">bunzip2 file1.bz2</td>
<td align="left">解压一个叫做 ‘file1.bz2’的文件</td>
</tr>
<tr>
<td align="left">bzip2 file1</td>
<td align="left">压缩一个叫做 ‘file1’ 的文件</td>
</tr>
<tr>
<td align="left">gunzip file1.gz</td>
<td align="left">解压一个叫做 ‘file1.gz’的文件</td>
</tr>
<tr>
<td align="left">gzip file1</td>
<td align="left">压缩一个叫做 ‘file1’的文件</td>
</tr>
<tr>
<td align="left">gzip -9 file1</td>
<td align="left">最大程度压缩</td>
</tr>
<tr>
<td align="left">rar a file1.rar test_file</td>
<td align="left">创建一个叫做 ‘file1.rar’ 的包</td>
</tr>
<tr>
<td align="left">rar a file1.rar file1 file2 dir1</td>
<td align="left">同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’</td>
</tr>
<tr>
<td align="left">rar x file1.rar</td>
<td align="left">解压rar包</td>
</tr>
<tr>
<td align="left">unrar x file1.rar</td>
<td align="left">解压rar包</td>
</tr>
<tr>
<td align="left">tar -cvf archive.tar file1</td>
<td align="left">创建一个非压缩的 tarball</td>
</tr>
<tr>
<td align="left">tar -cvf archive.tar file1 file2 dir1</td>
<td align="left">创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件</td>
</tr>
<tr>
<td align="left">tar -tf archive.tar</td>
<td align="left">显示一个包中的内容</td>
</tr>
<tr>
<td align="left">tar -xvf archive.tar</td>
<td align="left">释放一个包</td>
</tr>
<tr>
<td align="left">tar -xvf archive.tar -C /tmp</td>
<td align="left">将压缩包释放到 /tmp目录下</td>
</tr>
<tr>
<td align="left">tar -cvfj archive.tar.bz2 dir1</td>
<td align="left">创建一个bzip2格式的压缩包</td>
</tr>
<tr>
<td align="left">tar -xvfj archive.tar.bz2</td>
<td align="left">解压一个bzip2格式的压缩包</td>
</tr>
<tr>
<td align="left">tar -cvfz archive.tar.gz dir1</td>
<td align="left">创建一个gzip格式的压缩包</td>
</tr>
<tr>
<td align="left">tar -xvfz archive.tar.gz</td>
<td align="left">解压一个gzip格式的压缩包</td>
</tr>
<tr>
<td align="left">zip file1.zip file1</td>
<td align="left">创建一个zip格式的压缩包</td>
</tr>
<tr>
<td align="left">zip -r file1.zip file1 file2 dir1</td>
<td align="left">将几个文件和目录同时压缩成一个zip格式的压缩包</td>
</tr>
<tr>
<td align="left">unzip file1.zip</td>
<td align="left">解压一个zip格式压缩包</td>
</tr>
</tbody></table>
<p><a name="X96C2"></a></p>
<h3 id="12-RPM-包-（Fedora-Redhat及类似系统）"><a href="#12-RPM-包-（Fedora-Redhat及类似系统）" class="headerlink" title="12.RPM 包 - （Fedora, Redhat及类似系统）"></a>12.RPM 包 - （Fedora, Redhat及类似系统）</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">rpm -ivh package.rpm</td>
<td align="left">安装一个rpm包</td>
</tr>
<tr>
<td align="left">rpm -ivh –nodeeps package.rpm</td>
<td align="left">安装一个rpm包而忽略依赖关系警告</td>
</tr>
<tr>
<td align="left">rpm -U package.rpm</td>
<td align="left">更新一个rpm包但不改变其配置文件</td>
</tr>
<tr>
<td align="left">rpm -F package.rpm</td>
<td align="left">更新一个确定已经安装的rpm包</td>
</tr>
<tr>
<td align="left">rpm -e package_name.rpm</td>
<td align="left">删除一个rpm包</td>
</tr>
<tr>
<td align="left">rpm -qa</td>
<td align="left">显示系统中所有已经安装的rpm包</td>
</tr>
<tr>
<td align="left">rpm -qa</td>
<td align="left">grep httpd</td>
</tr>
<tr>
<td align="left">rpm -qi package_name</td>
<td align="left">获取一个已安装包的特殊信息</td>
</tr>
<tr>
<td align="left">rpm -qg “System Environment/Daemons”</td>
<td align="left">显示一个组件的rpm包</td>
</tr>
<tr>
<td align="left">rpm -ql package_name</td>
<td align="left">显示一个已经安装的rpm包提供的文件列表</td>
</tr>
<tr>
<td align="left">rpm -qc package_name</td>
<td align="left">显示一个已经安装的rpm包提供的配置文件列表</td>
</tr>
<tr>
<td align="left">rpm -q package_name –whatrequires</td>
<td align="left">显示与一个rpm包存在依赖关系的列表</td>
</tr>
<tr>
<td align="left">rpm -q package_name –whatprovides</td>
<td align="left">显示一个rpm包所占的体积</td>
</tr>
<tr>
<td align="left">rpm -q package_name –scripts</td>
<td align="left">显示在安装/删除期间所执行的脚本l</td>
</tr>
<tr>
<td align="left">rpm -q package_name –changelog</td>
<td align="left">显示一个rpm包的修改历史</td>
</tr>
<tr>
<td align="left">rpm -qf /etc/httpd/conf/httpd.conf</td>
<td align="left">确认所给的文件由哪个rpm包所提供</td>
</tr>
<tr>
<td align="left">rpm -qp package.rpm -l</td>
<td align="left">显示由一个尚未安装的rpm包提供的文件列表</td>
</tr>
<tr>
<td align="left">rpm –import /media/cdrom/RPM-GPG-KEY</td>
<td align="left">导入公钥数字证书</td>
</tr>
<tr>
<td align="left">rpm –checksig package.rpm</td>
<td align="left">确认一个rpm包的完整性</td>
</tr>
<tr>
<td align="left">rpm -qa gpg-pubkey</td>
<td align="left">确认已安装的所有rpm包的完整性</td>
</tr>
<tr>
<td align="left">rpm -V package_name</td>
<td align="left">检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间</td>
</tr>
<tr>
<td align="left">rpm -Va</td>
<td align="left">检查系统中所有已安装的rpm包- 小心使用</td>
</tr>
<tr>
<td align="left">rpm -Vp package.rpm</td>
<td align="left">确认一个rpm包还未安装</td>
</tr>
<tr>
<td align="left">rpm2cpio package.rpm</td>
<td align="left">cpio –extract –make-directories bin</td>
</tr>
<tr>
<td align="left">rpm -ivh /usr/src/redhat/RPMS/arch/package.rpm</td>
<td align="left">从一个rpm源码安装一个构建好的包</td>
</tr>
<tr>
<td align="left">rpmbuild –rebuild package_name.src.rpm</td>
<td align="left">从一个rpm源码构建一个 rpm 包</td>
</tr>
</tbody></table>
<p><a name="qqGzk"></a></p>
<h3 id="13-YUM-软件包升级器-（Fedora-RedHat及类似系统）"><a href="#13-YUM-软件包升级器-（Fedora-RedHat及类似系统）" class="headerlink" title="13.YUM 软件包升级器 - （Fedora, RedHat及类似系统）"></a>13.YUM 软件包升级器 - （Fedora, RedHat及类似系统）</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">yum install package_name</td>
<td align="left">下载并安装一个rpm包</td>
</tr>
<tr>
<td align="left">yum localinstall package_name.rpm</td>
<td align="left">将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系</td>
</tr>
<tr>
<td align="left">yum update package_name.rpm</td>
<td align="left">更新当前系统中所有安装的rpm包</td>
</tr>
<tr>
<td align="left">yum update package_name</td>
<td align="left">更新一个rpm包</td>
</tr>
<tr>
<td align="left">yum remove package_name</td>
<td align="left">删除一个rpm包</td>
</tr>
<tr>
<td align="left">yum list</td>
<td align="left">列出当前系统中安装的所有包</td>
</tr>
<tr>
<td align="left">yum search package_name</td>
<td align="left">在rpm仓库中搜寻软件包</td>
</tr>
<tr>
<td align="left">yum clean packages</td>
<td align="left">清理rpm缓存删除下载的包</td>
</tr>
<tr>
<td align="left">yum clean headers</td>
<td align="left">删除所有头文件</td>
</tr>
<tr>
<td align="left">yum clean all</td>
<td align="left">删除所有缓存的包和头文件</td>
</tr>
</tbody></table>
<p><a name="PpGLT"></a></p>
<h3 id="14-DEB-包-Debian-Ubuntu-以及类似系统"><a href="#14-DEB-包-Debian-Ubuntu-以及类似系统" class="headerlink" title="14.DEB 包 (Debian, Ubuntu 以及类似系统)"></a>14.DEB 包 (Debian, Ubuntu 以及类似系统)</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">dpkg -i package.deb</td>
<td align="left">安装/更新一个 deb 包</td>
</tr>
<tr>
<td align="left">dpkg -r package_name</td>
<td align="left">从系统删除一个 deb 包</td>
</tr>
<tr>
<td align="left">dpkg -l</td>
<td align="left">显示系统中所有已经安装的 deb 包</td>
</tr>
<tr>
<td align="left">dpkg -l</td>
<td align="left">grep httpd</td>
</tr>
<tr>
<td align="left">dpkg -s package_name</td>
<td align="left">获得已经安装在系统中一个特殊包的信息</td>
</tr>
<tr>
<td align="left">dpkg -L package_name</td>
<td align="left">显示系统中已经安装的一个deb包所提供的文件列表</td>
</tr>
<tr>
<td align="left">dpkg –contents package.deb</td>
<td align="left">显示尚未安装的一个包所提供的文件列表</td>
</tr>
<tr>
<td align="left">dpkg -S /bin/ping</td>
<td align="left">确认所给的文件由哪个deb包提供</td>
</tr>
</tbody></table>
<p><a name="clMyW"></a></p>
<h3 id="15-APT-软件工具-Debian-Ubuntu-以及类似系统"><a href="#15-APT-软件工具-Debian-Ubuntu-以及类似系统" class="headerlink" title="15.APT 软件工具 (Debian, Ubuntu 以及类似系统)"></a>15.APT 软件工具 (Debian, Ubuntu 以及类似系统)</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">apt-get install package_name</td>
<td align="left">安装/更新一个 deb 包</td>
</tr>
<tr>
<td align="left">apt-cdrom install package_name</td>
<td align="left">从光盘安装/更新一个 deb 包</td>
</tr>
<tr>
<td align="left">apt-get update</td>
<td align="left">升级列表中的软件包</td>
</tr>
<tr>
<td align="left">apt-get upgrade</td>
<td align="left">升级所有已安装的软件</td>
</tr>
<tr>
<td align="left">apt-get remove package_name</td>
<td align="left">从系统删除一个deb包</td>
</tr>
<tr>
<td align="left">apt-get check</td>
<td align="left">确认依赖的软件仓库正确</td>
</tr>
<tr>
<td align="left">apt-get clean</td>
<td align="left">从下载的软件包中清理缓存</td>
</tr>
<tr>
<td align="left">apt-cache search searched-package</td>
<td align="left">返回包含所要搜索字符串的软件包名称</td>
</tr>
</tbody></table>
<p><a name="CnXxZ"></a></p>
<h3 id="16-查看文件内容"><a href="#16-查看文件内容" class="headerlink" title="16.查看文件内容"></a>16.查看文件内容</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">cat file1</td>
<td align="left">从第一个字节开始正向查看文件的内容</td>
</tr>
<tr>
<td align="left">tac file1</td>
<td align="left">从最后一行开始反向查看一个文件的内容</td>
</tr>
<tr>
<td align="left">more file1</td>
<td align="left">查看一个长文件的内容</td>
</tr>
<tr>
<td align="left">less file1</td>
<td align="left">类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作</td>
</tr>
<tr>
<td align="left">head -2 file1</td>
<td align="left">查看一个文件的前两行</td>
</tr>
<tr>
<td align="left">tail -2 file1</td>
<td align="left">查看一个文件的最后两行</td>
</tr>
<tr>
<td align="left">tail -f /var/log/messages</td>
<td align="left">实时查看被添加到一个文件中的内容</td>
</tr>
</tbody></table>
<p><a name="SZkWh"></a></p>
<h3 id="17-文本处理"><a href="#17-文本处理" class="headerlink" title="17.文本处理"></a>17.文本处理</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">cat file1 file2 …</td>
<td align="left">command &lt;&gt; file1_in.txt_or_file1_out.txt</td>
</tr>
<tr>
<td align="left">cat file1</td>
<td align="left">command( sed, grep, awk, grep, etc…) &gt; result.txt</td>
</tr>
<tr>
<td align="left">cat file1</td>
<td align="left">command( sed, grep, awk, grep, etc…) &gt;&gt; result.txt</td>
</tr>
<tr>
<td align="left">grep Aug /var/log/messages</td>
<td align="left">在文件 ‘/var/log/messages’中查找关键词”Aug”</td>
</tr>
<tr>
<td align="left">grep ^Aug /var/log/messages</td>
<td align="left">在文件 ‘/var/log/messages’中查找以”Aug”开始的词汇</td>
</tr>
<tr>
<td align="left">grep [0-9] /var/log/messages</td>
<td align="left">选择 ‘/var/log/messages’ 文件中所有包含数字的行</td>
</tr>
<tr>
<td align="left">grep Aug -R /var/log/*</td>
<td align="left">在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug”</td>
</tr>
<tr>
<td align="left">sed ‘s/stringa1/stringa2/g’ example.txt</td>
<td align="left">将example.txt文件中的 “string1” 替换成 “string2”</td>
</tr>
<tr>
<td align="left">sed ‘/^$/d’ example.txt</td>
<td align="left">从example.txt文件中删除所有空白行</td>
</tr>
<tr>
<td align="left">sed ‘/ *#/d; /^$/d’ example.txt</td>
<td align="left">从example.txt文件中删除所有注释和空白行</td>
</tr>
<tr>
<td align="left">echo ‘esempio’</td>
<td align="left">tr ‘[:lower:]’ ‘[:upper:]’</td>
</tr>
<tr>
<td align="left">sed -e ‘1d’ result.txt</td>
<td align="left">从文件example.txt 中排除第一行</td>
</tr>
<tr>
<td align="left">sed -n ‘/stringa1/p’</td>
<td align="left">查看只包含词汇 “string1”的行</td>
</tr>
<tr>
<td align="left">sed -e ‘s/ *$//‘ example.txt</td>
<td align="left">删除每一行最后的空白字符</td>
</tr>
<tr>
<td align="left">sed -e ‘s/stringa1//g’ example.txt</td>
<td align="left">从文档中只删除词汇 “string1” 并保留剩余全部</td>
</tr>
<tr>
<td align="left">sed -n ‘1,5p;5q’ example.txt</td>
<td align="left">查看从第一行到第5行内容</td>
</tr>
<tr>
<td align="left">sed -n ‘5p;5q’ example.txt</td>
<td align="left">查看第5行</td>
</tr>
<tr>
<td align="left">sed -e ‘s/00*/0/g’ example.txt</td>
<td align="left">用单个零替换多个零</td>
</tr>
<tr>
<td align="left">cat -n file1</td>
<td align="left">标示文件的行数</td>
</tr>
<tr>
<td align="left">cat example.txt</td>
<td align="left">awk ‘NR%2==1’</td>
</tr>
<tr>
<td align="left">echo a b c</td>
<td align="left">awk ‘{print $1}’</td>
</tr>
<tr>
<td align="left">echo a b c</td>
<td align="left">awk ‘{print $1,$3}’</td>
</tr>
<tr>
<td align="left">paste file1 file2</td>
<td align="left">合并两个文件或两栏的内容</td>
</tr>
<tr>
<td align="left">paste -d ‘+’ file1 file2</td>
<td align="left">合并两个文件或两栏的内容，中间用”+”区分</td>
</tr>
<tr>
<td align="left">sort file1 file2</td>
<td align="left">排序两个文件的内容</td>
</tr>
<tr>
<td align="left">sort file1 file2 &#124; uniq</td>
<td align="left">取出两个文件的并集(重复的行只保留一份)</td>
</tr>
<tr>
<td align="left">sort file1 file2 &#124; uniq -u</td>
<td align="left">删除交集，留下其他的行</td>
</tr>
<tr>
<td align="left">sort file1 file2 &#124; uniq -d</td>
<td align="left">取出两个文件的交集(只留下同时存在于两个文件中的文件)</td>
</tr>
<tr>
<td align="left">comm -1 file1 file2</td>
<td align="left">比较两个文件的内容只删除 ‘file1’ 所包含的内容</td>
</tr>
<tr>
<td align="left">comm -2 file1 file2</td>
<td align="left">比较两个文件的内容只删除 ‘file2’ 所包含的内容</td>
</tr>
<tr>
<td align="left">comm -3 file1 file2</td>
<td align="left">比较两个文件的内容只删除两个文件共有的部分</td>
</tr>
</tbody></table>
<p><a name="UzQXq"></a></p>
<h3 id="18-字符设置和文件格式转换"><a href="#18-字符设置和文件格式转换" class="headerlink" title="18.字符设置和文件格式转换"></a>18.字符设置和文件格式转换</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">dos2unix filedos.txt fileunix.txt</td>
<td align="left">将一个文本文件的格式从MSDOS转换成UNIX</td>
</tr>
<tr>
<td align="left">unix2dos fileunix.txt filedos.txt</td>
<td align="left">将一个文本文件的格式从UNIX转换成MSDOS</td>
</tr>
<tr>
<td align="left">recode ..HTML &lt; page.txt &gt; page.html</td>
<td align="left">将一个文本文件转换成html</td>
</tr>
<tr>
<td align="left">recode -l &#124; more</td>
<td align="left">显示所有允许的转换格式</td>
</tr>
</tbody></table>
<p><a name="JlyWQ"></a></p>
<h3 id="19-文件系统分析"><a href="#19-文件系统分析" class="headerlink" title="19.文件系统分析"></a>19.文件系统分析</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">badblocks -v /dev/hda1</td>
<td align="left">检查磁盘hda1上的坏磁块</td>
</tr>
<tr>
<td align="left">fsck /dev/hda1</td>
<td align="left">修复/检查hda1磁盘上linux文件系统的完整性</td>
</tr>
<tr>
<td align="left">fsck.ext2 /dev/hda1</td>
<td align="left">修复/检查hda1磁盘上ext2文件系统的完整性</td>
</tr>
<tr>
<td align="left">e2fsck /dev/hda1</td>
<td align="left">修复/检查hda1磁盘上ext2文件系统的完整性</td>
</tr>
<tr>
<td align="left">e2fsck -j /dev/hda1</td>
<td align="left">修复/检查hda1磁盘上ext3文件系统的完整性</td>
</tr>
<tr>
<td align="left">fsck.ext3 /dev/hda1</td>
<td align="left">修复/检查hda1磁盘上ext3文件系统的完整性</td>
</tr>
<tr>
<td align="left">fsck.vfat /dev/hda1</td>
<td align="left">修复/检查hda1磁盘上fat文件系统的完整性</td>
</tr>
<tr>
<td align="left">fsck.msdos /dev/hda1</td>
<td align="left">修复/检查hda1磁盘上dos文件系统的完整性</td>
</tr>
<tr>
<td align="left">dosfsck /dev/hda1</td>
<td align="left">修复/检查hda1磁盘上dos文件系统的完整性</td>
</tr>
</tbody></table>
<p><a name="KFdFu"></a></p>
<h3 id="20-初始化一个文件系统"><a href="#20-初始化一个文件系统" class="headerlink" title="20.初始化一个文件系统"></a>20.初始化一个文件系统</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">mkfs /dev/hda1</td>
<td align="left">在hda1分区创建一个文件系统</td>
</tr>
<tr>
<td align="left">mke2fs /dev/hda1</td>
<td align="left">在hda1分区创建一个linux ext2的文件系统</td>
</tr>
<tr>
<td align="left">mke2fs -j /dev/hda1</td>
<td align="left">在hda1分区创建一个linux ext3(日志型)的文件系统</td>
</tr>
<tr>
<td align="left">mkfs -t vfat 32 -F /dev/hda1</td>
<td align="left">创建一个 FAT32 文件系统</td>
</tr>
<tr>
<td align="left">fdformat -n /dev/fd0</td>
<td align="left">格式化一个软盘</td>
</tr>
<tr>
<td align="left">mkswap /dev/hda3</td>
<td align="left">创建一个swap文件系统</td>
</tr>
</tbody></table>
<p><a name="AtccC"></a></p>
<h3 id="21-SWAP文件系统"><a href="#21-SWAP文件系统" class="headerlink" title="21.SWAP文件系统"></a>21.SWAP文件系统</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">mkswap /dev/hda3</td>
<td align="left">创建一个swap文件系统</td>
</tr>
<tr>
<td align="left">swapon /dev/hda3</td>
<td align="left">启用一个新的swap文件系统</td>
</tr>
<tr>
<td align="left">swapon /dev/hda2 /dev/hdb3</td>
<td align="left">启用两个swap分区</td>
</tr>
</tbody></table>
<p><a name="lDuGm"></a></p>
<h3 id="22-备份"><a href="#22-备份" class="headerlink" title="22.备份"></a>22.备份</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">dump -0aj -f /tmp/home0.bak /home</td>
<td align="left">制作一个 ‘/home’ 目录的完整备份</td>
</tr>
<tr>
<td align="left">dump -1aj -f /tmp/home0.bak /home</td>
<td align="left">制作一个 ‘/home’ 目录的交互式备份</td>
</tr>
<tr>
<td align="left">restore -if /tmp/home0.bak</td>
<td align="left">还原一个交互式备份</td>
</tr>
<tr>
<td align="left">rsync -rogpav –delete /home /tmp</td>
<td align="left">同步两边的目录</td>
</tr>
<tr>
<td align="left">rsync -rogpav -e ssh –delete /home ip_address:/tmp</td>
<td align="left">通过SSH通道rsync</td>
</tr>
<tr>
<td align="left">rsync -az -e ssh –delete ip_addr:/home/public /home/local</td>
<td align="left">通过ssh和压缩将一个远程目录同步到本地目录</td>
</tr>
<tr>
<td align="left">rsync -az -e ssh –delete /home/local ip_addr:/home/public</td>
<td align="left">通过ssh和压缩将本地目录同步到远程目录</td>
</tr>
<tr>
<td align="left">dd bs=1M if=/dev/hda</td>
<td align="left">gzip</td>
</tr>
<tr>
<td align="left">dd if=/dev/sda of=/tmp/file1</td>
<td align="left">备份磁盘内容到一个文件</td>
</tr>
<tr>
<td align="left">tar -Puf backup.tar /home/user</td>
<td align="left">执行一次对 ‘/home/user’ 目录的交互式备份操作</td>
</tr>
<tr>
<td align="left">( cd /tmp/local/ &amp;&amp; tar c . )</td>
<td align="left">ssh -C user@ip_addr ‘cd /home/share/ &amp;&amp; tar x -p’</td>
</tr>
<tr>
<td align="left">( tar c /home )</td>
<td align="left">ssh -C user@ip_addr ‘cd /home/backup-home &amp;&amp; tar x -p’</td>
</tr>
<tr>
<td align="left">tar cf - .</td>
<td align="left">(cd /tmp/backup ; tar xf - )</td>
</tr>
<tr>
<td align="left">find /home/user1 -name ‘*.txt’</td>
<td align="left">xargs cp -av –target-directory=/home/backup/ –parents</td>
</tr>
<tr>
<td align="left">find /var/log -name ‘*.log’</td>
<td align="left">tar cv –files-from=-</td>
</tr>
<tr>
<td align="left">dd if=/dev/hda of=/dev/fd0 bs=512 count=1</td>
<td align="left">做一个将 MBR (Master Boot Record)内容复制到软盘的动作</td>
</tr>
<tr>
<td align="left">dd if=/dev/fd0 of=/dev/hda bs=512 count=1</td>
<td align="left">从已经保存到软盘的备份中恢复MBR内容</td>
</tr>
</tbody></table>
<p><a name="Wo9bd"></a></p>
<h3 id="23-光盘"><a href="#23-光盘" class="headerlink" title="23.光盘"></a>23.光盘</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force</td>
<td align="left">清空一个可复写的光盘内容</td>
</tr>
<tr>
<td align="left">mkisofs /dev/cdrom &gt; cd.iso</td>
<td align="left">在磁盘上创建一个光盘的iso镜像文件</td>
</tr>
<tr>
<td align="left">mkisofs /dev/cdrom</td>
<td align="left">gzip &gt; cd_iso.gz</td>
</tr>
<tr>
<td align="left">mkisofs -J -allow-leading-dots -R -V “Label CD” -iso-level 4 -o ./cd.iso data_cd</td>
<td align="left">创建一个目录的iso镜像文件</td>
</tr>
<tr>
<td align="left">cdrecord -v dev=/dev/cdrom cd.iso</td>
<td align="left">刻录一个ISO镜像文件</td>
</tr>
<tr>
<td align="left">gzip -dc cd_iso.gz &#124; cdrecord dev=/dev/cdrom -</td>
<td align="left">刻录一个压缩了的ISO镜像文件</td>
</tr>
<tr>
<td align="left">mount -o loop cd.iso /mnt/iso</td>
<td align="left">挂载一个ISO镜像文件</td>
</tr>
<tr>
<td align="left">cd-paranoia -B</td>
<td align="left">从一个CD光盘转录音轨到 wav 文件中</td>
</tr>
<tr>
<td align="left">cd-paranoia – “-3”</td>
<td align="left">从一个CD光盘转录音轨到 wav 文件中（参数-3）</td>
</tr>
<tr>
<td align="left">cdrecord –scanbus</td>
<td align="left">扫描总线以识别scsi通道</td>
</tr>
<tr>
<td align="left">dd if=/dev/hdc &#124; md5sum</td>
<td align="left">校验一个设备的md5sum编码，例如一张 CD</td>
</tr>
</tbody></table>
<p><a name="a0i72"></a></p>
<h3 id="24-网络-（以太网和WIFI无线）"><a href="#24-网络-（以太网和WIFI无线）" class="headerlink" title="24.网络 - （以太网和WIFI无线）"></a>24.网络 - （以太网和WIFI无线）</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">ifconfig eth0</td>
<td align="left">显示一个以太网卡的配置</td>
</tr>
<tr>
<td align="left">ifup eth0</td>
<td align="left">启用一个 ‘eth0’ 网络设备</td>
</tr>
<tr>
<td align="left">ifdown eth0</td>
<td align="left">禁用一个 ‘eth0’ 网络设备</td>
</tr>
<tr>
<td align="left">ifconfig eth0 192.168.1.1 netmask 255.255.255.0</td>
<td align="left">控制IP地址</td>
</tr>
<tr>
<td align="left">ifconfig eth0 promisc</td>
<td align="left">设置 ‘eth0’ 成混杂模式以嗅探数据包 (sniffing)</td>
</tr>
<tr>
<td align="left">dhclient eth0</td>
<td align="left">以dhcp模式启用 ‘eth0’</td>
</tr>
<tr>
<td align="left">route -n</td>
<td align="left">show routing table</td>
</tr>
<tr>
<td align="left">route add -net 0/0 gw IP_Gateway</td>
<td align="left">configure default gateway</td>
</tr>
<tr>
<td align="left">route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1</td>
<td align="left">configure static route to reach network ‘192.168.0.0/16’</td>
</tr>
<tr>
<td align="left">route del 0/0 gw IP_gateway</td>
<td align="left">remove static route</td>
</tr>
<tr>
<td align="left">echo “1” &gt; /proc/sys/net/ipv4/ip_forward</td>
<td align="left">activate ip routing</td>
</tr>
<tr>
<td align="left">hostname</td>
<td align="left">show hostname of system</td>
</tr>
<tr>
<td align="left">host <a href="http://www.example.com">www.example.com</a></td>
<td align="left">lookup hostname to resolve name to ip address and viceversa(1)</td>
</tr>
<tr>
<td align="left">nslookup <a href="http://www.example.com">www.example.com</a></td>
<td align="left">lookup hostname to resolve name to ip address and viceversa(2)</td>
</tr>
<tr>
<td align="left">ip link show</td>
<td align="left">show link status of all interfaces</td>
</tr>
<tr>
<td align="left">mii-tool eth0</td>
<td align="left">show link status of ‘eth0’</td>
</tr>
<tr>
<td align="left">ethtool eth0</td>
<td align="left">show statistics of network card ‘eth0’</td>
</tr>
<tr>
<td align="left">netstat -tup</td>
<td align="left">show all active network connections and their PID</td>
</tr>
<tr>
<td align="left">netstat -tupl</td>
<td align="left">show all network services listening on the system and their PID</td>
</tr>
<tr>
<td align="left">tcpdump tcp port 80</td>
<td align="left">show all HTTP traffic</td>
</tr>
<tr>
<td align="left">iwlist scan</td>
<td align="left">show wireless networks</td>
</tr>
<tr>
<td align="left">iwconfig eth1</td>
<td align="left">show configuration of a wireless network card</td>
</tr>
<tr>
<td align="left">whois <a href="http://www.example.com">www.example.com</a></td>
<td align="left">lookup on Whois database</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>解决git@github.com: Permission denied (publickey).</title>
    <url>/2020/09/21/%E8%A7%A3%E5%86%B3git-github-com-Permission-denied-publickey/</url>
    <content><![CDATA[<h1 id="解决git-github-com-Permission-denied-publickey"><a href="#解决git-github-com-Permission-denied-publickey" class="headerlink" title="解决git@github.com: Permission denied (publickey)."></a>解决<a href="mailto:git@github.com">git@github.com</a>: Permission denied (publickey).</h1><p><strong><img src="https://cdn.nlark.com/yuque/0/2020/png/1464016/1600691414505-8704740b-63d0-4842-8287-b80d8c9c6463.png#align=left&display=inline&height=271&margin=%5Bobject%20Object%5D&name=image.png&originHeight=271&originWidth=672&size=127432&status=done&style=none&width=672" alt="image.png"></strong><br /><strong>原因分析</strong><br />Permission denied (publickey) 没有权限的publickey ，<br />出现这错误一般是以下两种原因</p>
<ul>
<li>客户端与服务端未生成 ssh key</li>
<li>客户端与服务端的ssh key不匹配</li>
<li>找到问题的原因了，解决办法也就有了，重新生成一次ssh key ，服务端也重新配置一次即可。</li>
<li>我的原因是因为没有在ssh客户端上运行ssh-agent后,使用ssh-add命令向ssh-agent添加私钥</li>
</ul>
<p><strong>客户端生成ssh key</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class="line"></span><br><span class="line">XXX@qq.com改为自己的邮箱即可</span><br></pre></td></tr></table></figure>
<p>途中会让你输入密码啥的，不需要管，一路回车即可，会生成你的ssh key。<br />（在不改ssh key名称的情况下，如果重新生成的话会覆盖之前的ssh key。）<br /><br><br /><strong>然后再终端下执行命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -v git@github.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>最后两句会出现</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No more authentication methods to try.  </span><br><span class="line">　　Permission denied (publickey).</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>**<br><a name="C7Qb4"></a></p>
<h3 id="ssh客户端上运行ssh-agent后-就可以使用ssh-add命令向ssh-agent添加私钥"><a href="#ssh客户端上运行ssh-agent后-就可以使用ssh-add命令向ssh-agent添加私钥" class="headerlink" title="ssh客户端上运行ssh-agent后,就可以使用ssh-add命令向ssh-agent添加私钥"></a>ssh客户端上运行ssh-agent后,就可以使用ssh-add命令向ssh-agent添加私钥</h3><p><strong>在终端再执行以下命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-agent -s </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><br /><strong>接着在执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-add ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line"></span><br><span class="line">id_rsa是私钥的名字</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>如果执行后，提示执行ssh-add时出现Could not open a connection to your authentication agent</strong><br /><strong>执行如下命令　ssh-agent bash<br />然后再执行 ssh-add ~/.ssh/id_rsa即可。</strong><br /><br><br />Identity added: …这是ssh key文件路径的信息<br /><img src="https://cdn.nlark.com/yuque/0/2020/png/1464016/1600599762026-9b6cfa7b-2fbe-4cc5-9413-27916534ea3b.png#align=left&display=inline&height=631&margin=%5Bobject%20Object%5D&name=image.png&originHeight=631&originWidth=884&size=469528&status=done&style=none&width=884" alt="image.png"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
